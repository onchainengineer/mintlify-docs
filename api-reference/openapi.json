{
  "openapi": "3.0.1",
  "info": {
    "title": "Wirtual API",
    "description": "Wirtuald is the service created by running wirtual server. It is a thin API that connects workspaces, provisioners and users. wirtuald stores its state in Postgres and is the only service that communicates with Postgres.",
    "termsOfService": "https://wirtual.dev/legal/terms-of-service",
    "contact": {
      "name": "API Support",
      "url": "https://wirtual.dev",
      "email": "support@wirtual.dev"
    },
    "license": {
      "name": "AGPL-3.0",
      "url": "https://github.com/onchainengineering/hmi-wirtual/blob/main/LICENSE"
    },
    "version": "2.0"
  },
  "servers": [
    {
      "url": "/api/v2"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "API root handler",
        "operationId": "api-root-handler",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        }
      }
    },
    "/appearance": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get appearance",
        "operationId": "get-appearance",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.AppearanceConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update appearance",
        "operationId": "update-appearance",
        "requestBody": {
          "description": "Update appearance request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateAppearanceConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.UpdateAppearanceConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/applications/auth-redirect": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Redirect to URI with encrypted API key",
        "operationId": "redirect-to-uri-with-encrypted-api-key",
        "parameters": [
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Redirect destination",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Temporary Redirect",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/applications/host": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get applications host",
        "operationId": "get-applications-host",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.AppHostResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/applications/reconnecting-pty-signed-token": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Issue signed app token for reconnecting PTY",
        "operationId": "issue-signed-app-token-for-reconnecting-pty",
        "requestBody": {
          "description": "Issue reconnecting PTY signed token request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.IssueReconnectingPTYSignedTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.IssueReconnectingPTYSignedTokenResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/audit": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get audit logs",
        "operationId": "get-audit-logs",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page limit",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page offset",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.AuditLogResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/audit/testgenerate": {
      "post": {
        "tags": [
          "Audit"
        ],
        "summary": "Generate fake audit log",
        "operationId": "generate-fake-audit-log",
        "requestBody": {
          "description": "Audit log request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateTestAuditLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/authcheck": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Check authorization",
        "operationId": "check-authorization",
        "requestBody": {
          "description": "Authorization request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.AuthorizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.AuthorizationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/buildinfo": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Build info",
        "operationId": "build-info",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.BuildInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csp/reports": {
      "post": {
        "tags": [
          "General"
        ],
        "summary": "Report CSP violations",
        "operationId": "report-csp-violations",
        "requestBody": {
          "description": "Violation report",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtuald.cspViolation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/debug/coordinator": {
      "get": {
        "tags": [
          "Debug"
        ],
        "summary": "Debug Info Wireguard Coordinator",
        "operationId": "debug-info-wireguard-coordinator",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/debug/derp/traffic": {
      "get": {
        "tags": [
          "Debug"
        ],
        "summary": "Debug DERP traffic",
        "operationId": "debug-derp-traffic",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/derp.BytesSentRecv"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        }
      }
    },
    "/debug/expvar": {
      "get": {
        "tags": [
          "Debug"
        ],
        "summary": "Debug expvar",
        "operationId": "debug-expvar",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        }
      }
    },
    "/debug/health": {
      "get": {
        "tags": [
          "Debug"
        ],
        "summary": "Debug Info Deployment Health",
        "operationId": "debug-info-deployment-health",
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Force a healthcheck to run",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthsdk.HealthcheckReport"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/debug/health/settings": {
      "get": {
        "tags": [
          "Debug"
        ],
        "summary": "Get health settings",
        "operationId": "get-health-settings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthsdk.HealthSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Debug"
        ],
        "summary": "Update health settings",
        "operationId": "update-health-settings",
        "requestBody": {
          "description": "Update health settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/healthsdk.UpdateHealthSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthsdk.UpdateHealthSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/debug/tailnet": {
      "get": {
        "tags": [
          "Debug"
        ],
        "summary": "Debug Info Tailnet",
        "operationId": "debug-info-tailnet",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/debug/ws": {
      "get": {
        "tags": [
          "Debug"
        ],
        "summary": "Debug Info Websocket Test",
        "operationId": "debug-info-websocket-test",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        }
      }
    },
    "/debug/{user}/debug-link": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Debug OIDC context for a user",
        "operationId": "debug-oidc-context-for-a-user",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        }
      }
    },
    "/deployment/config": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get deployment config",
        "operationId": "get-deployment-config",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.DeploymentConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/deployment/ssh": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "SSH Config",
        "operationId": "ssh-config",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.SSHConfigResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/deployment/stats": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get deployment stats",
        "operationId": "get-deployment-stats",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.DeploymentStats"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/derp-map": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get DERP map updates",
        "operationId": "get-derp-map-updates",
        "responses": {
          "101": {
            "description": "Switching Protocols",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/entitlements": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get entitlements",
        "operationId": "get-entitlements",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Entitlements"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/experiments": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get enabled experiments",
        "operationId": "get-enabled-experiments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Experiment"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/experiments/available": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get safe experiments",
        "operationId": "get-safe-experiments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Experiment"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/external-auth": {
      "get": {
        "tags": [
          "Git"
        ],
        "summary": "Get user external auths",
        "operationId": "get-user-external-auths",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.ExternalAuthLink"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/external-auth/{externalauth}": {
      "get": {
        "tags": [
          "Git"
        ],
        "summary": "Get external auth by ID",
        "operationId": "get-external-auth-by-id",
        "parameters": [
          {
            "name": "externalauth",
            "in": "path",
            "description": "Git Provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.ExternalAuth"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Git"
        ],
        "summary": "Delete external auth user link by ID",
        "operationId": "delete-external-auth-user-link-by-id",
        "parameters": [
          {
            "name": "externalauth",
            "in": "path",
            "description": "Git Provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/external-auth/{externalauth}/device": {
      "get": {
        "tags": [
          "Git"
        ],
        "summary": "Get external auth device by ID.",
        "operationId": "get-external-auth-device-by-id",
        "parameters": [
          {
            "name": "externalauth",
            "in": "path",
            "description": "Git Provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.ExternalAuthDevice"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Git"
        ],
        "summary": "Post external auth device by ID",
        "operationId": "post-external-auth-device-by-id",
        "parameters": [
          {
            "name": "externalauth",
            "in": "path",
            "description": "External Provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload file",
        "description": "Swagger notice: Swagger 2.0 doesn't support file upload with a `content-type` different than `application/x-www-form-urlencoded`.",
        "operationId": "upload-file",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content-Type must be `application/x-tar` or `application/zip`",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/x-tar"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-tar": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File to be uploaded. If using tar format, file must conform to ustar (pax may cause problems).",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.UploadResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/files/{fileID}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get file by ID",
        "operationId": "get-file-by-id",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get groups",
        "operationId": "get-groups",
        "parameters": [
          {
            "name": "organization",
            "in": "query",
            "description": "Organization ID or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "has_member",
            "in": "query",
            "description": "User ID or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_ids",
            "in": "query",
            "description": "Comma separated list of group IDs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Group"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/groups/{group}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get group by ID",
        "operationId": "get-group-by-id",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "description": "Group id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Group"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Delete group by name",
        "operationId": "delete-group-by-name",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "description": "Group name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Group"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update group by name",
        "operationId": "update-group-by-name",
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "description": "Group name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Patch group request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.PatchGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Group"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/insights/daus": {
      "get": {
        "tags": [
          "Insights"
        ],
        "summary": "Get deployment DAUs",
        "operationId": "get-deployment-daus",
        "parameters": [
          {
            "name": "tz_offset",
            "in": "query",
            "description": "Time-zone offset (e.g. -2)",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.DAUsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/insights/templates": {
      "get": {
        "tags": [
          "Insights"
        ],
        "summary": "Get insights about templates",
        "operationId": "get-insights-about-templates",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "description": "Start time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "End time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Interval",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "day"
              ]
            }
          },
          {
            "name": "template_ids",
            "in": "query",
            "description": "Template IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.TemplateInsightsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/insights/user-activity": {
      "get": {
        "tags": [
          "Insights"
        ],
        "summary": "Get insights about user activity",
        "operationId": "get-insights-about-user-activity",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "description": "Start time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "End time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "template_ids",
            "in": "query",
            "description": "Template IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.UserActivityInsightsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/insights/user-latency": {
      "get": {
        "tags": [
          "Insights"
        ],
        "summary": "Get insights about user latency",
        "operationId": "get-insights-about-user-latency",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "description": "Start time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "End time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "template_ids",
            "in": "query",
            "description": "Template IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.UserLatencyInsightsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/integrations/jfrog/xray-scan": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get JFrog XRay scan by workspace agent ID.",
        "operationId": "get-jfrog-xray-scan-by-workspace-agent-id",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "query",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_id",
            "in": "query",
            "description": "Agent ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.JFrogXrayScan"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Post JFrog XRay scan by workspace agent ID.",
        "operationId": "post-jfrog-xray-scan-by-workspace-agent-id",
        "requestBody": {
          "description": "Post JFrog XRay scan request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.JFrogXrayScan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/licenses": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get licenses",
        "operationId": "get-licenses",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.License"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Add new license",
        "operationId": "add-new-license",
        "requestBody": {
          "description": "Add license request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.AddLicenseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.License"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/licenses/refresh-entitlements": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update license entitlements",
        "operationId": "update-license-entitlements",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/licenses/{id}": {
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Delete license",
        "operationId": "delete-license",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "License ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/notifications/dispatch-methods": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get notification dispatch methods",
        "operationId": "get-notification-dispatch-methods",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.NotificationMethodsResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/notifications/settings": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get notifications settings",
        "operationId": "get-notifications-settings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.NotificationsSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Update notifications settings",
        "operationId": "update-notifications-settings",
        "requestBody": {
          "description": "Notifications settings request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.NotificationsSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.NotificationsSettings"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/notifications/templates/system": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get system notification templates",
        "operationId": "get-system-notification-templates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.NotificationTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/notifications/templates/{notification_template}/method": {
      "put": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update notification template dispatch method",
        "operationId": "update-notification-template-dispatch-method",
        "parameters": [
          {
            "name": "notification_template",
            "in": "path",
            "description": "Notification template UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "304": {
            "description": "Not modified",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/oauth2-provider/apps": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get OAuth2 applications.",
        "operationId": "get-oauth2-applications",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by applications authorized for a user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.OAuth2ProviderApp"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Create OAuth2 application.",
        "operationId": "create-oauth2-application",
        "requestBody": {
          "description": "The OAuth2 application to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.PostOAuth2ProviderAppRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.OAuth2ProviderApp"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/oauth2-provider/apps/{app}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get OAuth2 application.",
        "operationId": "get-oauth2-application",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "App ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.OAuth2ProviderApp"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update OAuth2 application.",
        "operationId": "update-oauth2-application",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "App ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an OAuth2 application.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.PutOAuth2ProviderAppRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.OAuth2ProviderApp"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      },
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Delete OAuth2 application.",
        "operationId": "delete-oauth2-application",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "App ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/oauth2-provider/apps/{app}/secrets": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get OAuth2 application secrets.",
        "operationId": "get-oauth2-application-secrets",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "App ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.OAuth2ProviderAppSecret"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Create OAuth2 application secret.",
        "operationId": "create-oauth2-application-secret",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "App ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.OAuth2ProviderAppSecretFull"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/oauth2-provider/apps/{app}/secrets/{secretID}": {
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Delete OAuth2 application secret.",
        "operationId": "delete-oauth2-application-secret",
        "parameters": [
          {
            "name": "app",
            "in": "path",
            "description": "App ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretID",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/oauth2/authorize": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "OAuth2 authorization request.",
        "operationId": "oauth2-authorization-request",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "A random unguessable string",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "Response type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "code"
              ]
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Redirect here after authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Token scopes (currently ignored)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Found",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/oauth2/tokens": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "OAuth2 token exchange.",
        "operationId": "oauth2-token-exchange",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "grant_type"
                ],
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "description": "Client ID, required if grant_type=authorization_code"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "Client secret, required if grant_type=authorization_code"
                  },
                  "code": {
                    "type": "string",
                    "description": "Authorization code, required if grant_type=authorization_code"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "Refresh token, required if grant_type=refresh_token"
                  },
                  "grant_type": {
                    "type": "string",
                    "description": "Grant type",
                    "enum": [
                      "authorization_code",
                      "refresh_token"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth2.Token"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Delete OAuth2 application tokens.",
        "operationId": "delete-oauth2-application-tokens",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get organizations",
        "operationId": "get-organizations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Organization"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create organization",
        "operationId": "create-organization",
        "requestBody": {
          "description": "Create organization request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateOrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Organization"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/organizations/{organization}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get organization by ID",
        "operationId": "get-organization-by-id",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Organization"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete organization",
        "operationId": "delete-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update organization",
        "operationId": "update-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Patch organization request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateOrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Organization"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/organizations/{organization}/groups": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get groups by organization",
        "operationId": "get-groups-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Group"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Create group for organization",
        "operationId": "create-group-for-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create group request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Group"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/organizations/{organization}/groups/{groupName}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get group by organization and group name",
        "operationId": "get-group-by-organization-and-group-name",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupName",
            "in": "path",
            "description": "Group name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Group"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List organization members",
        "operationId": "list-organization-members",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.OrganizationMemberWithUserData"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/members/roles": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get member roles by organization",
        "operationId": "get-member-roles-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.AssignableRoles"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Upsert a custom organization role",
        "operationId": "upsert-a-custom-organization-role",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Upsert role request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CustomRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      },
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Insert a custom organization role",
        "operationId": "insert-a-custom-organization-role",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Insert role request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CustomRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/organizations/{organization}/members/roles/{roleName}": {
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete a custom organization role",
        "operationId": "delete-a-custom-organization-role",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleName",
            "in": "path",
            "description": "Role name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/members/{user}": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Add organization member",
        "operationId": "add-organization-member",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.OrganizationMember"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Remove organization member",
        "operationId": "remove-organization-member",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/members/{user}/roles": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Assign role to organization member",
        "operationId": "assign-role-to-organization-member",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update roles request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateRoles"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.OrganizationMember"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/organizations/{organization}/members/{user}/workspace-quota": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get workspace quota by user",
        "operationId": "get-workspace-quota-by-user",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceQuota"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/members/{user}/workspaces": {
      "post": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Create user workspace by organization",
        "description": "Create a new workspace using a template. The request must\nspecify either the Template ID or the Template Version ID,\nnot both. If the Template ID is specified, the active version\nof the template will be used.",
        "operationId": "create-user-workspace-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user",
            "in": "path",
            "description": "Username, UUID, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create workspace request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Workspace"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/organizations/{organization}/provisionerdaemons": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get provisioner daemons",
        "operationId": "get-provisioner-daemons",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Provisioner tags to filter by (JSON of the form {'tag1':'value1','tag2':'value2'})",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.ProvisionerDaemon"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/provisionerdaemons/serve": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Serve provisioner daemon",
        "operationId": "serve-provisioner-daemon",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Switching Protocols",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/provisionerkeys": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "List provisioner key",
        "operationId": "list-provisioner-key",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.ProvisionerKey"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Create provisioner key",
        "operationId": "create-provisioner-key",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.CreateProvisionerKeyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/provisionerkeys/daemons": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "List provisioner key daemons",
        "operationId": "list-provisioner-key-daemons",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.ProvisionerKeyDaemons"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/provisionerkeys/{provisionerkey}": {
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Delete provisioner key",
        "operationId": "delete-provisioner-key",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provisionerkey",
            "in": "path",
            "description": "Provisioner key name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/settings/idpsync/available-fields": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get the available organization idp sync claim fields",
        "operationId": "get-the-available-organization-idp-sync-claim-fields",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/settings/idpsync/groups": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get group IdP Sync settings by organization",
        "operationId": "get-group-idp-sync-settings-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.GroupSyncSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update group IdP Sync settings by organization",
        "operationId": "update-group-idp-sync-settings-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "New settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.GroupSyncSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.GroupSyncSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/organizations/{organization}/settings/idpsync/roles": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get role IdP Sync settings by organization",
        "operationId": "get-role-idp-sync-settings-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.RoleSyncSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update role IdP Sync settings by organization",
        "operationId": "update-role-idp-sync-settings-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "New settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.RoleSyncSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.RoleSyncSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/organizations/{organization}/templates": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get templates by organization",
        "operationId": "get-templates-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Template"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Create template by organization",
        "operationId": "create-template-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Template"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/organizations/{organization}/templates/examples": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template examples by organization",
        "operationId": "get-template-examples-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.TemplateExample"
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/templates/{templatename}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get templates by organization and template name",
        "operationId": "get-templates-by-organization-and-template-name",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "templatename",
            "in": "path",
            "description": "Template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Template"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/templates/{templatename}/versions/{templateversionname}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template version by organization, template, and name",
        "operationId": "get-template-version-by-organization-template-and-name",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "templatename",
            "in": "path",
            "description": "Template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateversionname",
            "in": "path",
            "description": "Template version name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.TemplateVersion"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/templates/{templatename}/versions/{templateversionname}/previous": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get previous template version by organization, template, and name",
        "operationId": "get-previous-template-version-by-organization-template-and-name",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "templatename",
            "in": "path",
            "description": "Template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateversionname",
            "in": "path",
            "description": "Template version name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.TemplateVersion"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/organizations/{organization}/templateversions": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Create template version by organization",
        "operationId": "create-template-version-by-organization",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Create template version request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateTemplateVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.TemplateVersion"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/provisionerkeys/{provisionerkey}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Fetch provisioner key details",
        "operationId": "fetch-provisioner-key-details",
        "parameters": [
          {
            "name": "provisionerkey",
            "in": "path",
            "description": "Provisioner Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.ProvisionerKey"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualProvisionerKey": []
          }
        ]
      }
    },
    "/regions": {
      "get": {
        "tags": [
          "WorkspaceProxies"
        ],
        "summary": "Get site-wide regions for workspace connections",
        "operationId": "get-site-wide-regions-for-workspace-connections",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.RegionsResponse-wirtualsdk_Region"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/replicas": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get active replicas",
        "operationId": "get-active-replicas",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Replica"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/scim/v2/ServiceProviderConfig": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "SCIM 2.0: Service Provider Config",
        "operationId": "scim-get-service-provider-config",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/scim/v2/Users": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "SCIM 2.0: Get users",
        "operationId": "scim-get-users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "SCIM 2.0: Create new user",
        "operationId": "scim-create-new-user",
        "requestBody": {
          "description": "New user",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/wirtuald.SCIMUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtuald.SCIMUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/scim/v2/Users/{id}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "SCIM 2.0: Get user by ID",
        "operationId": "scim-get-user-by-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Enterprise"
        ],
        "summary": "SCIM 2.0: Update user account",
        "operationId": "scim-update-user-status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Update user request",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/wirtuald.SCIMUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/scim+json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.User"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/settings/idpsync/available-fields": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get the available idp sync claim fields",
        "operationId": "get-the-available-idp-sync-claim-fields",
        "parameters": [
          {
            "name": "organization",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/settings/idpsync/organization": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get organization IdP Sync settings",
        "operationId": "get-organization-idp-sync-settings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.OrganizationSyncSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update organization IdP Sync settings",
        "operationId": "update-organization-idp-sync-settings",
        "requestBody": {
          "description": "New settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.OrganizationSyncSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.OrganizationSyncSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/tailnet": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "User-scoped tailnet RPC connection",
        "operationId": "user-scoped-tailnet-rpc-connection",
        "responses": {
          "101": {
            "description": "Switching Protocols",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get all templates",
        "operationId": "get-all-templates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Template"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templates/examples": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template examples",
        "operationId": "get-template-examples",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.TemplateExample"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templates/{template}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template metadata by ID",
        "operationId": "get-template-metadata-by-id",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Template"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Templates"
        ],
        "summary": "Delete template by ID",
        "operationId": "delete-template-by-id",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Templates"
        ],
        "summary": "Update template metadata by ID",
        "operationId": "update-template-metadata-by-id",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Template"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templates/{template}/acl": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get template ACLs",
        "operationId": "get-template-acls",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.TemplateUser"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update template ACL",
        "operationId": "update-template-acl",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Update template request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateTemplateACL"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/templates/{template}/acl/available": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get template available acl users/groups",
        "operationId": "get-template-available-acl-usersgroups",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.ACLAvailable"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templates/{template}/daus": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template DAUs by ID",
        "operationId": "get-template-daus-by-id",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.DAUsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templates/{template}/versions": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "List template versions by template ID",
        "operationId": "list-template-versions-by-template-id",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "after_id",
            "in": "query",
            "description": "After ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "description": "Include archived versions in the list",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page offset",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.TemplateVersion"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Templates"
        ],
        "summary": "Update active template version by template ID",
        "operationId": "update-active-template-version-by-template-id",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Modified template version",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateActiveTemplateVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/templates/{template}/versions/archive": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Archive template unused versions by template id",
        "operationId": "archive-template-unused-versions-by-template-id",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Archive request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.ArchiveTemplateVersionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/templates/{template}/versions/{templateversionname}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template version by template ID and name",
        "operationId": "get-template-version-by-template-id-and-name",
        "parameters": [
          {
            "name": "template",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "templateversionname",
            "in": "path",
            "description": "Template version name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.TemplateVersion"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template version by ID",
        "operationId": "get-template-version-by-id",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.TemplateVersion"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Templates"
        ],
        "summary": "Patch template version by ID",
        "operationId": "patch-template-version-by-id",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Patch template version request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.PatchTemplateVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.TemplateVersion"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/templateversions/{templateversion}/archive": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Archive template version",
        "operationId": "archive-template-version",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/cancel": {
      "patch": {
        "tags": [
          "Templates"
        ],
        "summary": "Cancel template version by ID",
        "operationId": "cancel-template-version-by-id",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/dry-run": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Create template version dry-run",
        "operationId": "create-template-version-dry-run",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Dry-run request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateTemplateVersionDryRunRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.ProvisionerJob"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/templateversions/{templateversion}/dry-run/{jobID}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template version dry-run by job ID",
        "operationId": "get-template-version-dry-run-by-job-id",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.ProvisionerJob"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/dry-run/{jobID}/cancel": {
      "patch": {
        "tags": [
          "Templates"
        ],
        "summary": "Cancel template version dry-run by job ID",
        "operationId": "cancel-template-version-dry-run-by-job-id",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/dry-run/{jobID}/logs": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template version dry-run logs by job ID",
        "operationId": "get-template-version-dry-run-logs-by-job-id",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Before Unix timestamp",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "After Unix timestamp",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "follow",
            "in": "query",
            "description": "Follow log stream",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.ProvisionerJobLog"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/dry-run/{jobID}/matched-provisioners": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template version dry-run matched provisioners",
        "operationId": "get-template-version-dry-run-matched-provisioners",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.MatchedProvisioners"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/dry-run/{jobID}/resources": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template version dry-run resources by job ID",
        "operationId": "get-template-version-dry-run-resources-by-job-id",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobID",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.WorkspaceResource"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/external-auth": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get external auth by template version",
        "operationId": "get-external-auth-by-template-version",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.TemplateVersionExternalAuth"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/logs": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get logs by template version",
        "operationId": "get-logs-by-template-version",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Before log id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "After log id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "follow",
            "in": "query",
            "description": "Follow log stream",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.ProvisionerJobLog"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/parameters": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Removed: Get parameters by template version",
        "operationId": "removed-get-parameters-by-template-version",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/resources": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get resources by template version",
        "operationId": "get-resources-by-template-version",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.WorkspaceResource"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/rich-parameters": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get rich parameters by template version",
        "operationId": "get-rich-parameters-by-template-version",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.TemplateVersionParameter"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/schema": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Removed: Get schema by template version",
        "operationId": "removed-get-schema-by-template-version",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/unarchive": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Unarchive template version",
        "operationId": "unarchive-template-version",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/templateversions/{templateversion}/variables": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get template variables by template version",
        "operationId": "get-template-variables-by-template-version",
        "parameters": [
          {
            "name": "templateversion",
            "in": "path",
            "description": "Template version ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.TemplateVersionVariable"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/updatecheck": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Update check",
        "operationId": "update-check",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.UpdateCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get users",
        "operationId": "get-users",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after_id",
            "in": "query",
            "description": "After ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page offset",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.GetUsersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create new user",
        "operationId": "create-new-user",
        "requestBody": {
          "description": "Create user request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateUserRequestWithOrgs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.User"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/authmethods": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get authentication methods",
        "operationId": "get-authentication-methods",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.AuthMethods"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/first": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Check initial user created",
        "operationId": "check-initial-user-created",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create initial user",
        "operationId": "create-initial-user",
        "requestBody": {
          "description": "First user request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateFirstUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.CreateFirstUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Log in user",
        "operationId": "log-in-user",
        "requestBody": {
          "description": "Login request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.LoginWithPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.LoginWithPasswordResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Log out user",
        "operationId": "log-out-user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/oauth2/github/callback": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "OAuth 2.0 GitHub Callback",
        "operationId": "oauth-20-github-callback",
        "responses": {
          "307": {
            "description": "Temporary Redirect",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/oidc/callback": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "OpenID Connect Callback",
        "operationId": "openid-connect-callback",
        "responses": {
          "307": {
            "description": "Temporary Redirect",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/otp/change-password": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Change password with a one-time passcode",
        "operationId": "change-password-with-a-one-time-passcode",
        "requestBody": {
          "description": "Change password request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.ChangePasswordWithOneTimePasscodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/otp/request": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Request one-time passcode",
        "operationId": "request-one-time-passcode",
        "requestBody": {
          "description": "One-time passcode request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.RequestOneTimePasscodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/roles": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get site member roles",
        "operationId": "get-site-member-roles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.AssignableRoles"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/validate-password": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Validate user password",
        "operationId": "validate-user-password",
        "requestBody": {
          "description": "Validate user password request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.ValidateUserPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.ValidateUserPasswordResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/{user}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by name",
        "operationId": "get-user-by-name",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, username, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.User"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "operationId": "delete-user",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/appearance": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user appearance settings",
        "operationId": "update-user-appearance-settings",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New appearance settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateUserAppearanceSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.User"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/{user}/autofill-parameters": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get autofill build parameters for user",
        "operationId": "get-autofill-build-parameters-for-user",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, username, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "in": "query",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.UserParameter"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/convert-login": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Convert user from password to oauth authentication",
        "operationId": "convert-user-from-password-to-oauth-authentication",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Convert request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.ConvertLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.OAuthConversionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/{user}/gitsshkey": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user Git SSH key",
        "operationId": "get-user-git-ssh-key",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.GitSSHKey"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Regenerate user SSH key",
        "operationId": "regenerate-user-ssh-key",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.GitSSHKey"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/keys": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create new session key",
        "operationId": "create-new-session-key",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.GenerateAPIKeyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/keys/tokens": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user tokens",
        "operationId": "get-user-tokens",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.APIKey"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create token API key",
        "operationId": "create-token-api-key",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create token request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.GenerateAPIKeyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/{user}/keys/tokens/tokenconfig": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get token config",
        "operationId": "get-token-config",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.TokenConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/keys/tokens/{keyname}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get API key by token name",
        "operationId": "get-api-key-by-token-name",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyname",
            "in": "path",
            "description": "Key Name",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.APIKey"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/keys/{keyid}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get API key by ID",
        "operationId": "get-api-key-by-id",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyid",
            "in": "path",
            "description": "Key ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.APIKey"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete API key",
        "operationId": "delete-api-key",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyid",
            "in": "path",
            "description": "Key ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/login-type": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user login type",
        "operationId": "get-user-login-type",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.UserLoginType"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/notifications/preferences": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get user notification preferences",
        "operationId": "get-user-notification-preferences",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.NotificationPreference"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Update user notification preferences",
        "operationId": "update-user-notification-preferences",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Preferences",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateUserNotificationPreferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.NotificationPreference"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/{user}/organizations": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get organizations by user",
        "operationId": "get-organizations-by-user",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.Organization"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/organizations/{organizationname}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get organization by user and organization name",
        "operationId": "get-organization-by-user-and-organization-name",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationname",
            "in": "path",
            "description": "Organization name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Organization"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user password",
        "operationId": "update-user-password",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update password request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateUserPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/{user}/profile": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user profile",
        "operationId": "update-user-profile",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated profile",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateUserProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.User"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/{user}/quiet-hours": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get user quiet hours schedule",
        "operationId": "get-user-quiet-hours-schedule",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.UserQuietHoursScheduleResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update user quiet hours schedule",
        "operationId": "update-user-quiet-hours-schedule",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Update schedule request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateUserQuietHoursScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.UserQuietHoursScheduleResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/{user}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user roles",
        "operationId": "get-user-roles",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.User"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Assign role to user",
        "operationId": "assign-role-to-user",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update roles request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateRoles"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.User"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/users/{user}/status/activate": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Activate user account",
        "operationId": "activate-user-account",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.User"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/status/suspend": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Suspend user account",
        "operationId": "suspend-user-account",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.User"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/workspace/{workspacename}": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get workspace metadata by user and workspace name",
        "operationId": "get-workspace-metadata-by-user-and-workspace-name",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspacename",
            "in": "path",
            "description": "Workspace name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_deleted",
            "in": "query",
            "description": "Return data instead of HTTP 404 if the workspace is deleted",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Workspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/workspace/{workspacename}/builds/{buildnumber}": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Get workspace build by user, workspace name, and build number",
        "operationId": "get-workspace-build-by-user-workspace-name-and-build-number",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspacename",
            "in": "path",
            "description": "Workspace name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "buildnumber",
            "in": "path",
            "description": "Build number",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuild"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/users/{user}/workspaces": {
      "post": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Create user workspace",
        "description": "Create a new workspace using a template. The request must\nspecify either the Template ID or the Template Version ID,\nnot both. If the Template ID is specified, the active version\nof the template will be used.",
        "operationId": "create-user-workspace",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username, UUID, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create workspace request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Workspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspace-quota/{user}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get workspace quota by user deprecated",
        "operationId": "get-workspace-quota-by-user-deprecated",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "User ID, name, or me",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceQuota"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/aws-instance-identity": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Authenticate agent on AWS instance",
        "operationId": "authenticate-agent-on-aws-instance",
        "requestBody": {
          "description": "Instance identity token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/agentsdk.AWSInstanceIdentityToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agentsdk.AuthenticateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceagents/azure-instance-identity": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Authenticate agent on Azure instance",
        "operationId": "authenticate-agent-on-azure-instance",
        "requestBody": {
          "description": "Instance identity token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/agentsdk.AzureInstanceIdentityToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agentsdk.AuthenticateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceagents/connection": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get connection info for workspace agent generic",
        "operationId": "get-connection-info-for-workspace-agent-generic",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspacesdk.AgentConnectionInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        }
      }
    },
    "/workspaceagents/google-instance-identity": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Authenticate agent on Google Cloud instance",
        "operationId": "authenticate-agent-on-google-cloud-instance",
        "requestBody": {
          "description": "Instance identity token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/agentsdk.GoogleInstanceIdentityToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agentsdk.AuthenticateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceagents/me/external-auth": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get workspace agent external auth",
        "operationId": "get-workspace-agent-external-auth",
        "parameters": [
          {
            "name": "match",
            "in": "query",
            "description": "Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Provider ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "listen",
            "in": "query",
            "description": "Wait for a new token to be issued",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agentsdk.ExternalAuthResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/me/gitauth": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Removed: Get workspace agent git auth",
        "operationId": "removed-get-workspace-agent-git-auth",
        "parameters": [
          {
            "name": "match",
            "in": "query",
            "description": "Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Provider ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "listen",
            "in": "query",
            "description": "Wait for a new token to be issued",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agentsdk.ExternalAuthResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/me/gitsshkey": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get workspace agent Git SSH key",
        "operationId": "get-workspace-agent-git-ssh-key",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agentsdk.GitSSHKey"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/me/log-source": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Post workspace agent log source",
        "operationId": "post-workspace-agent-log-source",
        "requestBody": {
          "description": "Log source request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/agentsdk.PostLogSourceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentLogSource"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceagents/me/logs": {
      "patch": {
        "tags": [
          "Agents"
        ],
        "summary": "Patch workspace agent logs",
        "operationId": "patch-workspace-agent-logs",
        "requestBody": {
          "description": "logs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/agentsdk.PatchLogs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceagents/me/rpc": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Workspace agent RPC API",
        "operationId": "workspace-agent-rpc-api",
        "responses": {
          "101": {
            "description": "Switching Protocols",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        }
      }
    },
    "/workspaceagents/{workspaceagent}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get workspace agent by ID",
        "operationId": "get-workspace-agent-by-id",
        "parameters": [
          {
            "name": "workspaceagent",
            "in": "path",
            "description": "Workspace agent ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgent"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/{workspaceagent}/connection": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get connection info for workspace agent",
        "operationId": "get-connection-info-for-workspace-agent",
        "parameters": [
          {
            "name": "workspaceagent",
            "in": "path",
            "description": "Workspace agent ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspacesdk.AgentConnectionInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/{workspaceagent}/coordinate": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Coordinate workspace agent",
        "operationId": "coordinate-workspace-agent",
        "parameters": [
          {
            "name": "workspaceagent",
            "in": "path",
            "description": "Workspace agent ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Switching Protocols",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/{workspaceagent}/listening-ports": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get listening ports for workspace agent",
        "operationId": "get-listening-ports-for-workspace-agent",
        "parameters": [
          {
            "name": "workspaceagent",
            "in": "path",
            "description": "Workspace agent ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentListeningPortsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/{workspaceagent}/logs": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get logs by workspace agent",
        "operationId": "get-logs-by-workspace-agent",
        "parameters": [
          {
            "name": "workspaceagent",
            "in": "path",
            "description": "Workspace agent ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Before log id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "After log id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "follow",
            "in": "query",
            "description": "Follow log stream",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "no_compression",
            "in": "query",
            "description": "Disable compression for WebSocket connection",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentLog"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/{workspaceagent}/pty": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Open PTY to workspace agent",
        "operationId": "open-pty-to-workspace-agent",
        "parameters": [
          {
            "name": "workspaceagent",
            "in": "path",
            "description": "Workspace agent ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Switching Protocols",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/{workspaceagent}/startup-logs": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Removed: Get logs by workspace agent",
        "operationId": "removed-get-logs-by-workspace-agent",
        "parameters": [
          {
            "name": "workspaceagent",
            "in": "path",
            "description": "Workspace agent ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Before log id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "After log id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "follow",
            "in": "query",
            "description": "Follow log stream",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "no_compression",
            "in": "query",
            "description": "Disable compression for WebSocket connection",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentLog"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceagents/{workspaceagent}/watch-metadata": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Watch for workspace agent metadata updates",
        "operationId": "watch-for-workspace-agent-metadata-updates",
        "parameters": [
          {
            "name": "workspaceagent",
            "in": "path",
            "description": "Workspace agent ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        }
      }
    },
    "/workspacebuilds/{workspacebuild}": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Get workspace build",
        "operationId": "get-workspace-build",
        "parameters": [
          {
            "name": "workspacebuild",
            "in": "path",
            "description": "Workspace build ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuild"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspacebuilds/{workspacebuild}/cancel": {
      "patch": {
        "tags": [
          "Builds"
        ],
        "summary": "Cancel workspace build",
        "operationId": "cancel-workspace-build",
        "parameters": [
          {
            "name": "workspacebuild",
            "in": "path",
            "description": "Workspace build ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspacebuilds/{workspacebuild}/logs": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Get workspace build logs",
        "operationId": "get-workspace-build-logs",
        "parameters": [
          {
            "name": "workspacebuild",
            "in": "path",
            "description": "Workspace build ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Before Unix timestamp",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "After Unix timestamp",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "follow",
            "in": "query",
            "description": "Follow log stream",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.ProvisionerJobLog"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspacebuilds/{workspacebuild}/parameters": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Get build parameters for workspace build",
        "operationId": "get-build-parameters-for-workspace-build",
        "parameters": [
          {
            "name": "workspacebuild",
            "in": "path",
            "description": "Workspace build ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuildParameter"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspacebuilds/{workspacebuild}/resources": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Removed: Get workspace resources for workspace build",
        "operationId": "removed-get-workspace-resources-for-workspace-build",
        "parameters": [
          {
            "name": "workspacebuild",
            "in": "path",
            "description": "Workspace build ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.WorkspaceResource"
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspacebuilds/{workspacebuild}/state": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Get provisioner state for workspace build",
        "operationId": "get-provisioner-state-for-workspace-build",
        "parameters": [
          {
            "name": "workspacebuild",
            "in": "path",
            "description": "Workspace build ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuild"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspacebuilds/{workspacebuild}/timings": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Get workspace build timings by ID",
        "operationId": "get-workspace-build-timings-by-id",
        "parameters": [
          {
            "name": "workspacebuild",
            "in": "path",
            "description": "Workspace build ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuildTimings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaceproxies": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get workspace proxies",
        "operationId": "get-workspace-proxies",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.RegionsResponse-wirtualsdk_WorkspaceProxy"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Create workspace proxy",
        "operationId": "create-workspace-proxy",
        "requestBody": {
          "description": "Create workspace proxy request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateWorkspaceProxyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceProxy"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceproxies/me/app-stats": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Report workspace app stats",
        "operationId": "report-workspace-app-stats",
        "requestBody": {
          "description": "Report app stats request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wsproxysdk.ReportAppStatsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceproxies/me/coordinate": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Workspace Proxy Coordinate",
        "operationId": "workspace-proxy-coordinate",
        "responses": {
          "101": {
            "description": "Switching Protocols",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        }
      }
    },
    "/workspaceproxies/me/crypto-keys": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get workspace proxy crypto keys",
        "operationId": "get-workspace-proxy-crypto-keys",
        "parameters": [
          {
            "name": "feature",
            "in": "query",
            "description": "Feature key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wsproxysdk.CryptoKeysResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        }
      }
    },
    "/workspaceproxies/me/deregister": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Deregister workspace proxy",
        "operationId": "deregister-workspace-proxy",
        "requestBody": {
          "description": "Deregister workspace proxy request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wsproxysdk.DeregisterWorkspaceProxyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceproxies/me/issue-signed-app-token": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Issue signed workspace app token",
        "operationId": "issue-signed-workspace-app-token",
        "requestBody": {
          "description": "Issue signed app token request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/workspaceapps.IssueTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wsproxysdk.IssueSignedAppTokenResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceproxies/me/register": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Register workspace proxy",
        "operationId": "register-workspace-proxy",
        "requestBody": {
          "description": "Register workspace proxy request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wsproxysdk.RegisterWorkspaceProxyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wsproxysdk.RegisterWorkspaceProxyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-apidocgen": {
          "skip": true
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaceproxies/{workspaceproxy}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Get workspace proxy",
        "operationId": "get-workspace-proxy",
        "parameters": [
          {
            "name": "workspaceproxy",
            "in": "path",
            "description": "Proxy ID or name",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceProxy"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Delete workspace proxy",
        "operationId": "delete-workspace-proxy",
        "parameters": [
          {
            "name": "workspaceproxy",
            "in": "path",
            "description": "Proxy ID or name",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Update workspace proxy",
        "operationId": "update-workspace-proxy",
        "parameters": [
          {
            "name": "workspaceproxy",
            "in": "path",
            "description": "Proxy ID or name",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Update workspace proxy request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.PatchWorkspaceProxy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceProxy"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "List workspaces",
        "operationId": "list-workspaces",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query in the format `key:value`. Available keys are: owner, template, name, status, has-agent, dormant, last_used_after, last_used_before.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page offset",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspacesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaces/{workspace}": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get workspace metadata by ID",
        "operationId": "get-workspace-metadata-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "include_deleted",
            "in": "query",
            "description": "Return data instead of HTTP 404 if the workspace is deleted",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Workspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Update workspace metadata by ID",
        "operationId": "update-workspace-metadata-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Metadata update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces/{workspace}/autostart": {
      "put": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Update workspace autostart schedule by ID",
        "operationId": "update-workspace-autostart-schedule-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Schedule update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateWorkspaceAutostartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces/{workspace}/autoupdates": {
      "put": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Update workspace automatic updates by ID",
        "operationId": "update-workspace-automatic-updates-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Automatic updates request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateWorkspaceAutomaticUpdatesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces/{workspace}/builds": {
      "get": {
        "tags": [
          "Builds"
        ],
        "summary": "Get workspace builds by workspace ID",
        "operationId": "get-workspace-builds-by-workspace-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "after_id",
            "in": "query",
            "description": "After ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Since timestamp",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuild"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Builds"
        ],
        "summary": "Create workspace build",
        "operationId": "create-workspace-build",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Create workspace build request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.CreateWorkspaceBuildRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuild"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces/{workspace}/dormant": {
      "put": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Update workspace dormancy status by id.",
        "operationId": "update-workspace-dormancy-status-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Make a workspace dormant or active",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateWorkspaceDormancy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Workspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces/{workspace}/extend": {
      "put": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Extend workspace deadline by ID",
        "operationId": "extend-workspace-deadline-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Extend deadline update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.PutExtendWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces/{workspace}/favorite": {
      "put": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Favorite workspace by ID.",
        "operationId": "favorite-workspace-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Unfavorite workspace by ID.",
        "operationId": "unfavorite-workspace-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaces/{workspace}/port-share": {
      "get": {
        "tags": [
          "PortSharing"
        ],
        "summary": "Get workspace agent port shares",
        "operationId": "get-workspace-agent-port-shares",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentPortShares"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "PortSharing"
        ],
        "summary": "Upsert workspace agent port share",
        "operationId": "upsert-workspace-agent-port-share",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Upsert port sharing level request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpsertWorkspaceAgentPortShareRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentPortShare"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      },
      "delete": {
        "tags": [
          "PortSharing"
        ],
        "summary": "Get workspace agent port shares",
        "operationId": "get-workspace-agent-port-shares",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Delete port sharing level request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.DeleteWorkspaceAgentPortShareRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces/{workspace}/resolve-autostart": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Resolve workspace autostart by id.",
        "operationId": "resolve-workspace-autostart-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.ResolveAutostartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaces/{workspace}/timings": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get workspace timings by ID",
        "operationId": "get-workspace-timings-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuildTimings"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    },
    "/workspaces/{workspace}/ttl": {
      "put": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Update workspace TTL by ID",
        "operationId": "update-workspace-ttl-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Workspace TTL update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.UpdateWorkspaceTTLRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces/{workspace}/usage": {
      "post": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Post Workspace Usage by ID",
        "operationId": "post-workspace-usage-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Post workspace usage request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/wirtualsdk.PostWorkspaceUsageRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ],
        "x-codegen-request-body-name": "request"
      }
    },
    "/workspaces/{workspace}/watch": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Watch workspace by ID",
        "operationId": "watch-workspace-by-id",
        "parameters": [
          {
            "name": "workspace",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/wirtualsdk.Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "WirtualSessionToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "agentsdk.AWSInstanceIdentityToken": {
        "required": [
          "document",
          "signature"
        ],
        "type": "object",
        "properties": {
          "document": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "agentsdk.AuthenticateResponse": {
        "type": "object",
        "properties": {
          "session_token": {
            "type": "string"
          }
        }
      },
      "agentsdk.AzureInstanceIdentityToken": {
        "required": [
          "encoding",
          "signature"
        ],
        "type": "object",
        "properties": {
          "encoding": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "agentsdk.ExternalAuthResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "token_extra": {
            "type": "object",
            "additionalProperties": true
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string",
            "description": "Deprecated: Only supported on `/workspaceagents/me/gitauth`\nfor backwards compatibility."
          }
        }
      },
      "agentsdk.GitSSHKey": {
        "type": "object",
        "properties": {
          "private_key": {
            "type": "string"
          },
          "public_key": {
            "type": "string"
          }
        }
      },
      "agentsdk.GoogleInstanceIdentityToken": {
        "required": [
          "json_web_token"
        ],
        "type": "object",
        "properties": {
          "json_web_token": {
            "type": "string"
          }
        }
      },
      "agentsdk.Log": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "level": {
            "$ref": "#/components/schemas/wirtualsdk.LogLevel"
          },
          "output": {
            "type": "string"
          }
        }
      },
      "agentsdk.PatchLogs": {
        "type": "object",
        "properties": {
          "log_source_id": {
            "type": "string"
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/agentsdk.Log"
            }
          }
        }
      },
      "agentsdk.PostLogSourceRequest": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "ID is a unique identifier for the log source.\nIt is scoped to a workspace agent, and can be statically\ndefined inside code to prevent duplicate sources from being\ncreated for the same agent."
          }
        }
      },
      "wirtuald.SCIMUser": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "display": {
                  "type": "string"
                },
                "primary": {
                  "type": "boolean"
                },
                "type": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "id": {
            "type": "string"
          },
          "meta": {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "object",
            "properties": {
              "familyName": {
                "type": "string"
              },
              "givenName": {
                "type": "string"
              }
            }
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userName": {
            "type": "string"
          }
        }
      },
      "wirtuald.cspViolation": {
        "type": "object",
        "properties": {
          "csp-report": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "wirtualsdk.ACLAvailable": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Group"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.ReducedUser"
            }
          }
        }
      },
      "wirtualsdk.APIKey": {
        "required": [
          "created_at",
          "expires_at",
          "id",
          "last_used",
          "lifetime_seconds",
          "login_type",
          "scope",
          "token_name",
          "updated_at",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "lifetime_seconds": {
            "type": "integer"
          },
          "login_type": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.LoginType"
              }
            ]
          },
          "scope": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.APIKeyScope"
              }
            ]
          },
          "token_name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.APIKeyScope": {
        "type": "string",
        "enum": [
          "all",
          "application_connect"
        ],
        "x-enum-varnames": [
          "APIKeyScopeAll",
          "APIKeyScopeApplicationConnect"
        ]
      },
      "wirtualsdk.AddLicenseRequest": {
        "required": [
          "license"
        ],
        "type": "object",
        "properties": {
          "license": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.AgentConnectionTiming": {
        "type": "object",
        "properties": {
          "ended_at": {
            "type": "string",
            "format": "date-time"
          },
          "stage": {
            "$ref": "#/components/schemas/wirtualsdk.TimingStage"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "workspace_agent_id": {
            "type": "string"
          },
          "workspace_agent_name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.AgentScriptTiming": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time"
          },
          "exit_code": {
            "type": "integer"
          },
          "stage": {
            "$ref": "#/components/schemas/wirtualsdk.TimingStage"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "workspace_agent_id": {
            "type": "string"
          },
          "workspace_agent_name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.AgentSubsystem": {
        "type": "string",
        "enum": [
          "envbox",
          "envbuilder",
          "exectrace"
        ],
        "x-enum-varnames": [
          "AgentSubsystemEnvbox",
          "AgentSubsystemEnvbuilder",
          "AgentSubsystemExectrace"
        ]
      },
      "wirtualsdk.AppHostResponse": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host is the externally accessible URL for the Wirtual instance."
          }
        }
      },
      "wirtualsdk.AppearanceConfig": {
        "type": "object",
        "properties": {
          "announcement_banners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.BannerConfig"
            }
          },
          "application_name": {
            "type": "string"
          },
          "docs_url": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "service_banner": {
            "type": "object",
            "description": "Deprecated: ServiceBanner has been replaced by AnnouncementBanners.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.BannerConfig"
              }
            ]
          },
          "support_links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.LinkConfig"
            }
          }
        }
      },
      "wirtualsdk.ArchiveTemplateVersionsRequest": {
        "type": "object",
        "properties": {
          "all": {
            "type": "boolean",
            "description": "By default, only failed versions are archived. Set this to true\nto archive all unused versions regardless of job status."
          }
        }
      },
      "wirtualsdk.AssignableRoles": {
        "type": "object",
        "properties": {
          "assignable": {
            "type": "boolean"
          },
          "built_in": {
            "type": "boolean",
            "description": "BuiltIn roles are immutable"
          },
          "display_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_permissions": {
            "type": "array",
            "description": "OrganizationPermissions are specific for the organization in the field 'OrganizationID' above.",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Permission"
            }
          },
          "site_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Permission"
            }
          },
          "user_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Permission"
            }
          }
        }
      },
      "wirtualsdk.AuditAction": {
        "type": "string",
        "enum": [
          "create",
          "write",
          "delete",
          "start",
          "stop",
          "login",
          "logout",
          "register",
          "request_password_reset"
        ],
        "x-enum-varnames": [
          "AuditActionCreate",
          "AuditActionWrite",
          "AuditActionDelete",
          "AuditActionStart",
          "AuditActionStop",
          "AuditActionLogin",
          "AuditActionLogout",
          "AuditActionRegister",
          "AuditActionRequestPasswordReset"
        ]
      },
      "wirtualsdk.AuditDiff": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/wirtualsdk.AuditDiffField"
        }
      },
      "wirtualsdk.AuditDiffField": {
        "type": "object",
        "properties": {
          "new": {
            "type": "object"
          },
          "old": {
            "type": "object"
          },
          "secret": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.AuditLog": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/wirtualsdk.AuditAction"
          },
          "additional_fields": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "description": {
            "type": "string"
          },
          "diff": {
            "$ref": "#/components/schemas/wirtualsdk.AuditDiff"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "type": "string"
          },
          "is_deleted": {
            "type": "boolean"
          },
          "organization": {
            "$ref": "#/components/schemas/wirtualsdk.MinimalOrganization"
          },
          "organization_id": {
            "type": "string",
            "description": "Deprecated: Use 'organization.id' instead.",
            "format": "uuid"
          },
          "request_id": {
            "type": "string",
            "format": "uuid"
          },
          "resource_icon": {
            "type": "string"
          },
          "resource_id": {
            "type": "string",
            "format": "uuid"
          },
          "resource_link": {
            "type": "string"
          },
          "resource_target": {
            "type": "string",
            "description": "ResourceTarget is the name of the resource."
          },
          "resource_type": {
            "$ref": "#/components/schemas/wirtualsdk.ResourceType"
          },
          "status_code": {
            "type": "integer"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/wirtualsdk.User"
          },
          "user_agent": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.AuditLogResponse": {
        "type": "object",
        "properties": {
          "audit_logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.AuditLog"
            }
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.AuthMethod": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.AuthMethods": {
        "type": "object",
        "properties": {
          "github": {
            "$ref": "#/components/schemas/wirtualsdk.AuthMethod"
          },
          "oidc": {
            "$ref": "#/components/schemas/wirtualsdk.OIDCAuthMethod"
          },
          "password": {
            "$ref": "#/components/schemas/wirtualsdk.AuthMethod"
          },
          "terms_of_service_url": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.AuthorizationCheck": {
        "type": "object",
        "properties": {
          "action": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.RBACAction"
              }
            ]
          },
          "object": {
            "type": "object",
            "description": "Object can represent a \"set\" of objects, such as: all workspaces in an organization, all workspaces owned by me, and all workspaces across the entire product.\nWhen defining an object, use the most specific language when possible to\nproduce the smallest set. Meaning to set as many fields on 'Object' as\nyou can. Example, if you want to check if you can update all workspaces\nowned by 'me', try to also add an 'OrganizationID' to the settings.\nOmitting the 'OrganizationID' could produce the incorrect value, as\nworkspaces have both `user` and `organization` owners.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.AuthorizationObject"
              }
            ]
          }
        },
        "description": "AuthorizationCheck is used to check if the currently authenticated user (or the specified user) can do a given action to a given set of objects."
      },
      "wirtualsdk.AuthorizationObject": {
        "type": "object",
        "properties": {
          "any_org": {
            "type": "boolean",
            "description": "AnyOrgOwner (optional) will disregard the org_owner when checking for permissions.\nThis cannot be set to true if the OrganizationID is set."
          },
          "organization_id": {
            "type": "string",
            "description": "OrganizationID (optional) adds the set constraint to all resources owned by a given organization."
          },
          "owner_id": {
            "type": "string",
            "description": "OwnerID (optional) adds the set constraint to all resources owned by a given user."
          },
          "resource_id": {
            "type": "string",
            "description": "ResourceID (optional) reduces the set to a singular resource. This assigns\na resource ID to the resource type, eg: a single workspace.\nThe rbac library will not fetch the resource from the database, so if you\nare using this option, you should also set the owner ID and organization ID\nif possible. Be as specific as possible using all the fields relevant."
          },
          "resource_type": {
            "type": "object",
            "description": "ResourceType is the name of the resource.\n`./wirtuald/rbac/object.go` has the list of valid resource types.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.RBACResource"
              }
            ]
          }
        },
        "description": "AuthorizationObject can represent a \"set\" of objects, such as: all workspaces in an organization, all workspaces owned by me, all workspaces across the entire product."
      },
      "wirtualsdk.AuthorizationRequest": {
        "type": "object",
        "properties": {
          "checks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/wirtualsdk.AuthorizationCheck"
            },
            "description": "Checks is a map keyed with an arbitrary string to a permission check.\nThe key can be any string that is helpful to the caller, and allows\nmultiple permission checks to be run in a single request.\nThe key ensures that each permission check has the same key in the\nresponse."
          }
        }
      },
      "wirtualsdk.AuthorizationResponse": {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      },
      "wirtualsdk.AutomaticUpdates": {
        "type": "string",
        "enum": [
          "always",
          "never"
        ],
        "x-enum-varnames": [
          "AutomaticUpdatesAlways",
          "AutomaticUpdatesNever"
        ]
      },
      "wirtualsdk.BannerConfig": {
        "type": "object",
        "properties": {
          "background_color": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.BuildInfoResponse": {
        "type": "object",
        "properties": {
          "agent_api_version": {
            "type": "string",
            "description": "AgentAPIVersion is the current version of the Agent API (back versions\nMAY still be supported)."
          },
          "dashboard_url": {
            "type": "string",
            "description": "DashboardURL is the URL to hit the deployment's dashboard.\nFor external workspace proxies, this is the wirtuald they are connected\nto."
          },
          "deployment_id": {
            "type": "string",
            "description": "DeploymentID is the unique identifier for this deployment."
          },
          "external_url": {
            "type": "string",
            "description": "ExternalURL references the current Wirtual version.\nFor production builds, this will link directly to a release. For development builds, this will link to a commit."
          },
          "provisioner_api_version": {
            "type": "string",
            "description": "ProvisionerAPIVersion is the current version of the Provisioner API"
          },
          "telemetry": {
            "type": "boolean",
            "description": "Telemetry is a boolean that indicates whether telemetry is enabled."
          },
          "upgrade_message": {
            "type": "string",
            "description": "UpgradeMessage is the message displayed to users when an outdated client\nis detected."
          },
          "version": {
            "type": "string",
            "description": "Version returns the semantic version of the build."
          },
          "workspace_proxy": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.BuildReason": {
        "type": "string",
        "enum": [
          "initiator",
          "autostart",
          "autostop"
        ],
        "x-enum-varnames": [
          "BuildReasonInitiator",
          "BuildReasonAutostart",
          "BuildReasonAutostop"
        ]
      },
      "wirtualsdk.ChangePasswordWithOneTimePasscodeRequest": {
        "required": [
          "email",
          "one_time_passcode",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "one_time_passcode": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.ConnectionLatency": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "example": 31.312
          },
          "p95": {
            "type": "number",
            "example": 119.832
          }
        }
      },
      "wirtualsdk.ConvertLoginRequest": {
        "required": [
          "password",
          "to_type"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "to_type": {
            "type": "object",
            "description": "ToType is the login type to convert to.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.LoginType"
              }
            ]
          }
        }
      },
      "wirtualsdk.CreateFirstUserRequest": {
        "required": [
          "email",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "trial": {
            "type": "boolean"
          },
          "trial_info": {
            "$ref": "#/components/schemas/wirtualsdk.CreateFirstUserTrialInfo"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.CreateFirstUserResponse": {
        "type": "object",
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.CreateFirstUserTrialInfo": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "developers": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.CreateGroupRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "quota_allowance": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.CreateOrganizationRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string",
            "description": "DisplayName will default to the same value as `Name` if not provided."
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.CreateProvisionerKeyResponse": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.CreateTemplateRequest": {
        "required": [
          "name",
          "template_version_id"
        ],
        "type": "object",
        "properties": {
          "activity_bump_ms": {
            "type": "integer",
            "description": "ActivityBumpMillis allows optionally specifying the activity bump\nduration for all workspaces created from this template. Defaults to 1h\nbut can be set to 0 to disable activity bumping."
          },
          "allow_user_autostart": {
            "type": "boolean",
            "description": "AllowUserAutostart allows users to set a schedule for autostarting their\nworkspace. By default this is true. This can only be disabled when using\nan enterprise license."
          },
          "allow_user_autostop": {
            "type": "boolean",
            "description": "AllowUserAutostop allows users to set a custom workspace TTL to use in\nplace of the template's DefaultTTL field. By default this is true. If\nfalse, the DefaultTTL will always be used. This can only be disabled when\nusing an enterprise license."
          },
          "allow_user_cancel_workspace_jobs": {
            "type": "boolean",
            "description": "Allow users to cancel in-progress workspace jobs.\n*bool as the default value is \"true\"."
          },
          "autostart_requirement": {
            "type": "object",
            "description": "AutostartRequirement allows optionally specifying the autostart allowed days\nfor workspaces created from this template. This is an enterprise feature.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.TemplateAutostartRequirement"
              }
            ]
          },
          "autostop_requirement": {
            "type": "object",
            "description": "AutostopRequirement allows optionally specifying the autostop requirement\nfor workspaces created from this template. This is an enterprise feature.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.TemplateAutostopRequirement"
              }
            ]
          },
          "default_ttl_ms": {
            "type": "integer",
            "description": "DefaultTTLMillis allows optionally specifying the default TTL\nfor all workspaces created from this template."
          },
          "delete_ttl_ms": {
            "type": "integer",
            "description": "TimeTilDormantAutoDeleteMillis allows optionally specifying the max lifetime before Wirtual\npermanently deletes dormant workspaces created from this template."
          },
          "description": {
            "type": "string",
            "description": "Description is a description of what the template contains. It must be\nless than 128 bytes."
          },
          "disable_everyone_group_access": {
            "type": "boolean",
            "description": "DisableEveryoneGroupAccess allows optionally disabling the default\nbehavior of granting the 'everyone' group access to use the template.\nIf this is set to true, the template will not be available to all users,\nand must be explicitly granted to users or groups in the permissions settings\nof the template."
          },
          "display_name": {
            "type": "string",
            "description": "DisplayName is the displayed name of the template."
          },
          "dormant_ttl_ms": {
            "type": "integer",
            "description": "TimeTilDormantMillis allows optionally specifying the max lifetime before Wirtual\nlocks inactive workspaces created from this template."
          },
          "failure_ttl_ms": {
            "type": "integer",
            "description": "FailureTTLMillis allows optionally specifying the max lifetime before Wirtual\nstops all resources for failed workspaces created from this template."
          },
          "icon": {
            "type": "string",
            "description": "Icon is a relative path or external URL that specifies\nan icon to be displayed in the dashboard."
          },
          "max_port_share_level": {
            "type": "object",
            "description": "MaxPortShareLevel allows optionally specifying the maximum port share level\nfor workspaces created from the template.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentPortShareLevel"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Name is the name of the template."
          },
          "require_active_version": {
            "type": "boolean",
            "description": "RequireActiveVersion mandates that workspaces are built with the active\ntemplate version."
          },
          "template_version_id": {
            "type": "string",
            "description": "VersionID is an in-progress or completed job to use as an initial version\nof the template.\n\nThis is required on creation to enable a user-flow of validating a\ntemplate works. There is no reason the data-model cannot support empty\ntemplates, but it doesn't make sense for users.",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.CreateTemplateVersionDryRunRequest": {
        "type": "object",
        "properties": {
          "rich_parameter_values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuildParameter"
            }
          },
          "user_variable_values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.VariableValue"
            }
          },
          "workspace_name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.CreateTemplateVersionRequest": {
        "required": [
          "provisioner",
          "storage_method"
        ],
        "type": "object",
        "properties": {
          "example_id": {
            "type": "string"
          },
          "file_id": {
            "type": "string",
            "format": "uuid"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "provisioner": {
            "type": "string",
            "enum": [
              "terraform",
              "echo"
            ]
          },
          "storage_method": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.ProvisionerStorageMethod"
              }
            ]
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "template_id": {
            "type": "string",
            "description": "TemplateID optionally associates a version with a template.",
            "format": "uuid"
          },
          "user_variable_values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.VariableValue"
            }
          }
        }
      },
      "wirtualsdk.CreateTestAuditLogRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.AuditAction"
              }
            ]
          },
          "additional_fields": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "build_reason": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.BuildReason"
              }
            ]
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "resource_id": {
            "type": "string",
            "format": "uuid"
          },
          "resource_type": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.ResourceType"
              }
            ]
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "wirtualsdk.CreateTokenRequest": {
        "type": "object",
        "properties": {
          "lifetime": {
            "type": "integer"
          },
          "scope": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.APIKeyScope"
              }
            ]
          },
          "token_name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.CreateUserRequestWithOrgs": {
        "required": [
          "email",
          "username"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "login_type": {
            "type": "object",
            "description": "UserLoginType defaults to LoginTypePassword.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.LoginType"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "organization_ids": {
            "type": "array",
            "description": "OrganizationIDs is a list of organization IDs that the user should be a member of.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "password": {
            "type": "string"
          },
          "user_status": {
            "type": "object",
            "description": "UserStatus defaults to UserStatusDormant.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.UserStatus"
              }
            ]
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.CreateWorkspaceBuildRequest": {
        "required": [
          "transition"
        ],
        "type": "object",
        "properties": {
          "dry_run": {
            "type": "boolean"
          },
          "log_level": {
            "type": "object",
            "description": "Log level changes the default logging verbosity of a provider (\"info\" if empty).",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.ProvisionerLogLevel"
              }
            ]
          },
          "orphan": {
            "type": "boolean",
            "description": "Orphan may be set for the Destroy transition."
          },
          "rich_parameter_values": {
            "type": "array",
            "description": "ParameterValues are optional. It will write params to the 'workspace' scope.\nThis will overwrite any existing parameters with the same name.\nThis will not delete old params not included in this list.",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuildParameter"
            }
          },
          "state": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "template_version_id": {
            "type": "string",
            "format": "uuid"
          },
          "transition": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceTransition"
              }
            ]
          }
        }
      },
      "wirtualsdk.CreateWorkspaceProxyRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.CreateWorkspaceRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "automatic_updates": {
            "$ref": "#/components/schemas/wirtualsdk.AutomaticUpdates"
          },
          "autostart_schedule": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rich_parameter_values": {
            "type": "array",
            "description": "RichParameterValues allows for additional parameters to be provided\nduring the initial provision.",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuildParameter"
            }
          },
          "template_id": {
            "type": "string",
            "description": "TemplateID specifies which template should be used for creating the workspace.",
            "format": "uuid"
          },
          "template_version_id": {
            "type": "string",
            "description": "TemplateVersionID can be used to specify a specific version of a template for creating the workspace.",
            "format": "uuid"
          },
          "ttl_ms": {
            "type": "integer"
          }
        },
        "description": "CreateWorkspaceRequest provides options for creating a new workspace. Only one of TemplateID or TemplateVersionID can be specified, not both. If TemplateID is specified, the active version of the template will be used."
      },
      "wirtualsdk.CryptoKey": {
        "type": "object",
        "properties": {
          "deletes_at": {
            "type": "string",
            "format": "date-time"
          },
          "feature": {
            "$ref": "#/components/schemas/wirtualsdk.CryptoKeyFeature"
          },
          "secret": {
            "type": "string"
          },
          "sequence": {
            "type": "integer"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "wirtualsdk.CryptoKeyFeature": {
        "type": "string",
        "enum": [
          "workspace_apps_api_key",
          "workspace_apps_token",
          "oidc_convert",
          "tailnet_resume"
        ],
        "x-enum-varnames": [
          "CryptoKeyFeatureWorkspaceAppsAPIKey",
          "CryptoKeyFeatureWorkspaceAppsToken",
          "CryptoKeyFeatureOIDCConvert",
          "CryptoKeyFeatureTailnetResume"
        ]
      },
      "wirtualsdk.CustomRoleRequest": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization_permissions": {
            "type": "array",
            "description": "OrganizationPermissions are specific to the organization the role belongs to.",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Permission"
            }
          },
          "site_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Permission"
            }
          },
          "user_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Permission"
            }
          }
        }
      },
      "wirtualsdk.DAUEntry": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "description": "Date is a string formatted as 2024-01-31.\nTimezone and time information is not included."
          }
        }
      },
      "wirtualsdk.DAUsResponse": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.DAUEntry"
            }
          },
          "tz_hour_offset": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.DERP": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/wirtualsdk.DERPConfig"
          },
          "server": {
            "$ref": "#/components/schemas/wirtualsdk.DERPServerConfig"
          }
        }
      },
      "wirtualsdk.DERPConfig": {
        "type": "object",
        "properties": {
          "block_direct": {
            "type": "boolean"
          },
          "force_websockets": {
            "type": "boolean"
          },
          "path": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.DERPRegion": {
        "type": "object",
        "properties": {
          "latency_ms": {
            "type": "number"
          },
          "preferred": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.DERPServerConfig": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "region_code": {
            "type": "string"
          },
          "region_id": {
            "type": "integer"
          },
          "region_name": {
            "type": "string"
          },
          "relay_url": {
            "$ref": "#/components/schemas/serpent.URL"
          },
          "stun_addresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "wirtualsdk.DangerousConfig": {
        "type": "object",
        "properties": {
          "allow_all_cors": {
            "type": "boolean"
          },
          "allow_path_app_sharing": {
            "type": "boolean"
          },
          "allow_path_app_site_owner_access": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.DeleteWorkspaceAgentPortShareRequest": {
        "type": "object",
        "properties": {
          "agent_name": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.DeploymentConfig": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/wirtualsdk.DeploymentValues"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serpent.Option"
            }
          }
        }
      },
      "wirtualsdk.DeploymentStats": {
        "type": "object",
        "properties": {
          "aggregated_from": {
            "type": "string",
            "description": "AggregatedFrom is the time in which stats are aggregated from.\nThis might be back in time a specific duration or interval.",
            "format": "date-time"
          },
          "collected_at": {
            "type": "string",
            "description": "CollectedAt is the time in which stats are collected at.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "NextUpdateAt is the time when the next batch of stats will\nbe updated.",
            "format": "date-time"
          },
          "session_count": {
            "$ref": "#/components/schemas/wirtualsdk.SessionCountDeploymentStats"
          },
          "workspaces": {
            "$ref": "#/components/schemas/wirtualsdk.WorkspaceDeploymentStats"
          }
        }
      },
      "wirtualsdk.DeploymentValues": {
        "type": "object",
        "properties": {
          "access_url": {
            "$ref": "#/components/schemas/serpent.URL"
          },
          "additional_csp_policy": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "address": {
            "type": "object",
            "description": "DEPRECATED: Use HTTPAddress or TLS.Address instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/serpent.HostPort"
              }
            ]
          },
          "agent_fallback_troubleshooting_url": {
            "$ref": "#/components/schemas/serpent.URL"
          },
          "agent_stat_refresh_interval": {
            "type": "integer"
          },
          "allow_workspace_renames": {
            "type": "boolean"
          },
          "autobuild_poll_interval": {
            "type": "integer"
          },
          "browser_only": {
            "type": "boolean"
          },
          "cache_directory": {
            "type": "string"
          },
          "cli_upgrade_message": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "config_ssh": {
            "$ref": "#/components/schemas/wirtualsdk.SSHConfig"
          },
          "dangerous": {
            "$ref": "#/components/schemas/wirtualsdk.DangerousConfig"
          },
          "derp": {
            "$ref": "#/components/schemas/wirtualsdk.DERP"
          },
          "disable_owner_workspace_exec": {
            "type": "boolean"
          },
          "disable_password_auth": {
            "type": "boolean"
          },
          "disable_path_apps": {
            "type": "boolean"
          },
          "docs_url": {
            "$ref": "#/components/schemas/serpent.URL"
          },
          "enable_terraform_debug_mode": {
            "type": "boolean"
          },
          "experiments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "external_auth": {
            "$ref": "#/components/schemas/serpent.Struct-array_wirtualsdk_ExternalAuthConfig"
          },
          "external_token_encryption_keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "healthcheck": {
            "$ref": "#/components/schemas/wirtualsdk.HealthcheckConfig"
          },
          "http_address": {
            "type": "string",
            "description": "HTTPAddress is a string because it may be set to zero to disable."
          },
          "in_memory_database": {
            "type": "boolean"
          },
          "job_hang_detector_interval": {
            "type": "integer"
          },
          "logging": {
            "$ref": "#/components/schemas/wirtualsdk.LoggingConfig"
          },
          "metrics_cache_refresh_interval": {
            "type": "integer"
          },
          "notifications": {
            "$ref": "#/components/schemas/wirtualsdk.NotificationsConfig"
          },
          "oauth2": {
            "$ref": "#/components/schemas/wirtualsdk.OAuth2Config"
          },
          "oidc": {
            "$ref": "#/components/schemas/wirtualsdk.OIDCConfig"
          },
          "pg_auth": {
            "type": "string"
          },
          "pg_connection_url": {
            "type": "string"
          },
          "pprof": {
            "$ref": "#/components/schemas/wirtualsdk.PprofConfig"
          },
          "prometheus": {
            "$ref": "#/components/schemas/wirtualsdk.PrometheusConfig"
          },
          "provisioner": {
            "$ref": "#/components/schemas/wirtualsdk.ProvisionerConfig"
          },
          "proxy_health_status_interval": {
            "type": "integer"
          },
          "proxy_trusted_headers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "proxy_trusted_origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rate_limit": {
            "$ref": "#/components/schemas/wirtualsdk.RateLimitConfig"
          },
          "redirect_to_access_url": {
            "type": "boolean"
          },
          "scim_api_key": {
            "type": "string"
          },
          "secure_auth_cookie": {
            "type": "boolean"
          },
          "session_lifetime": {
            "$ref": "#/components/schemas/wirtualsdk.SessionLifetime"
          },
          "ssh_keygen_algorithm": {
            "type": "string"
          },
          "strict_transport_security": {
            "type": "integer"
          },
          "strict_transport_security_options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "support": {
            "$ref": "#/components/schemas/wirtualsdk.SupportConfig"
          },
          "swagger": {
            "$ref": "#/components/schemas/wirtualsdk.SwaggerConfig"
          },
          "telemetry": {
            "$ref": "#/components/schemas/wirtualsdk.TelemetryConfig"
          },
          "terms_of_service_url": {
            "type": "string"
          },
          "tls": {
            "$ref": "#/components/schemas/wirtualsdk.TLSConfig"
          },
          "trace": {
            "$ref": "#/components/schemas/wirtualsdk.TraceConfig"
          },
          "update_check": {
            "type": "boolean"
          },
          "user_quiet_hours_schedule": {
            "$ref": "#/components/schemas/wirtualsdk.UserQuietHoursScheduleConfig"
          },
          "verbose": {
            "type": "boolean"
          },
          "web_terminal_renderer": {
            "type": "string"
          },
          "wgtunnel_host": {
            "type": "string"
          },
          "wildcard_access_url": {
            "type": "string"
          },
          "write_config": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.DisplayApp": {
        "type": "string",
        "enum": [
          "vscode",
          "vscode_insiders",
          "web_terminal",
          "port_forwarding_helper",
          "ssh_helper"
        ],
        "x-enum-varnames": [
          "DisplayAppVSCodeDesktop",
          "DisplayAppVSCodeInsiders",
          "DisplayAppWebTerminal",
          "DisplayAppPortForward",
          "DisplayAppSSH"
        ]
      },
      "wirtualsdk.Entitlement": {
        "type": "string",
        "enum": [
          "entitled",
          "grace_period",
          "not_entitled"
        ],
        "x-enum-varnames": [
          "EntitlementEntitled",
          "EntitlementGracePeriod",
          "EntitlementNotEntitled"
        ]
      },
      "wirtualsdk.Entitlements": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "features": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/wirtualsdk.Feature"
            }
          },
          "has_license": {
            "type": "boolean"
          },
          "refreshed_at": {
            "type": "string",
            "format": "date-time"
          },
          "require_telemetry": {
            "type": "boolean"
          },
          "trial": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "wirtualsdk.Experiment": {
        "type": "string",
        "enum": [
          "example",
          "auto-fill-parameters",
          "notifications",
          "workspace-usage"
        ],
        "x-enum-comments": {
          "ExperimentAutoFillParameters": "This should not be taken out of experiments until we have redesigned the feature.",
          "ExperimentExample": "This isn't used for anything.",
          "ExperimentNotifications": "Sends notifications via SMTP and webhooks following certain events.",
          "ExperimentWorkspaceUsage": "Enables the new workspace usage tracking."
        },
        "x-enum-varnames": [
          "ExperimentExample",
          "ExperimentAutoFillParameters",
          "ExperimentNotifications",
          "ExperimentWorkspaceUsage"
        ]
      },
      "wirtualsdk.ExternalAuth": {
        "type": "object",
        "properties": {
          "app_install_url": {
            "type": "string",
            "description": "AppInstallURL is the URL to install the app."
          },
          "app_installable": {
            "type": "boolean",
            "description": "AppInstallable is true if the request for app installs was successful."
          },
          "authenticated": {
            "type": "boolean"
          },
          "device": {
            "type": "boolean"
          },
          "display_name": {
            "type": "string"
          },
          "installations": {
            "type": "array",
            "description": "AppInstallations are the installations that the user has access to.",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.ExternalAuthAppInstallation"
            }
          },
          "user": {
            "type": "object",
            "description": "User is the user that authenticated with the provider.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.ExternalAuthUser"
              }
            ]
          }
        }
      },
      "wirtualsdk.ExternalAuthAppInstallation": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/wirtualsdk.ExternalAuthUser"
          },
          "configure_url": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.ExternalAuthConfig": {
        "type": "object",
        "properties": {
          "app_install_url": {
            "type": "string"
          },
          "app_installations_url": {
            "type": "string"
          },
          "auth_url": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "device_code_url": {
            "type": "string"
          },
          "device_flow": {
            "type": "boolean"
          },
          "display_icon": {
            "type": "string",
            "description": "DisplayIcon is a URL to an icon to display in the UI."
          },
          "display_name": {
            "type": "string",
            "description": "DisplayName is shown in the UI to identify the auth config."
          },
          "id": {
            "type": "string",
            "description": "ID is a unique identifier for the auth config.\nIt defaults to `type` when not provided."
          },
          "no_refresh": {
            "type": "boolean"
          },
          "regex": {
            "type": "string",
            "description": "Regex allows API requesters to match an auth config by\na string (e.g. wirtual.dev) instead of by it's type.\n\nGit clone makes use of this by parsing the URL from:\n'Username for \"https://github.com\":'\nAnd sending it to the Wirtual server to match against the Regex."
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_url": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Type is the type of external auth config."
          },
          "validate_url": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.ExternalAuthDevice": {
        "type": "object",
        "properties": {
          "device_code": {
            "type": "string"
          },
          "expires_in": {
            "type": "integer"
          },
          "interval": {
            "type": "integer"
          },
          "user_code": {
            "type": "string"
          },
          "verification_uri": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.ExternalAuthLink": {
        "type": "object",
        "properties": {
          "authenticated": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "has_refresh_token": {
            "type": "boolean"
          },
          "provider_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "validate_error": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.ExternalAuthUser": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "profile_url": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.Feature": {
        "type": "object",
        "properties": {
          "actual": {
            "type": "integer"
          },
          "enabled": {
            "type": "boolean"
          },
          "entitlement": {
            "$ref": "#/components/schemas/wirtualsdk.Entitlement"
          },
          "limit": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.GenerateAPIKeyResponse": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.GetUsersResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.User"
            }
          }
        }
      },
      "wirtualsdk.GitSSHKey": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "public_key": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.Group": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.ReducedUser"
            }
          },
          "name": {
            "type": "string"
          },
          "organization_display_name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_name": {
            "type": "string"
          },
          "quota_allowance": {
            "type": "integer"
          },
          "source": {
            "$ref": "#/components/schemas/wirtualsdk.GroupSource"
          },
          "total_member_count": {
            "type": "integer",
            "description": "How many members are in this group. Shows the total count,\neven if the user is not authorized to read group member details.\nMay be greater than `len(Group.Members)`."
          }
        }
      },
      "wirtualsdk.GroupSource": {
        "type": "string",
        "enum": [
          "user",
          "oidc"
        ],
        "x-enum-varnames": [
          "GroupSourceUser",
          "GroupSourceOIDC"
        ]
      },
      "wirtualsdk.GroupSyncSettings": {
        "type": "object",
        "properties": {
          "auto_create_missing_groups": {
            "type": "boolean",
            "description": "AutoCreateMissing controls whether groups returned by the OIDC provider\nare automatically created in Wirtual if they are missing."
          },
          "field": {
            "type": "string",
            "description": "Field is the name of the claim field that specifies what groups a user\nshould be in. If empty, no groups will be synced."
          },
          "legacy_group_name_mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "LegacyNameMapping is deprecated. It remaps an IDP group name to\na Wirtual group name. Since configuration is now done at runtime,\ngroup IDs are used to account for group renames.\nFor legacy configurations, this config option has to remain.\nDeprecated: Use Mapping instead."
          },
          "mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Mapping is a map from OIDC groups to Wirtual group IDs"
          },
          "regex_filter": {
            "type": "object",
            "description": "RegexFilter is a regular expression that filters the groups returned by\nthe OIDC provider. Any group not matched by this regex will be ignored.\nIf the group filter is nil, then no group filtering will occur.",
            "allOf": [
              {
                "$ref": "#/components/schemas/regexp.Regexp"
              }
            ]
          }
        }
      },
      "wirtualsdk.Healthcheck": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "integer",
            "description": "Interval specifies the seconds between each health check."
          },
          "threshold": {
            "type": "integer",
            "description": "Threshold specifies the number of consecutive failed health checks before returning \"unhealthy\"."
          },
          "url": {
            "type": "string",
            "description": "URL specifies the endpoint to check for the app health."
          }
        }
      },
      "wirtualsdk.HealthcheckConfig": {
        "type": "object",
        "properties": {
          "refresh": {
            "type": "integer"
          },
          "threshold_database": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.InsightsReportInterval": {
        "type": "string",
        "enum": [
          "day",
          "week"
        ],
        "x-enum-varnames": [
          "InsightsReportIntervalDay",
          "InsightsReportIntervalWeek"
        ]
      },
      "wirtualsdk.IssueReconnectingPTYSignedTokenRequest": {
        "required": [
          "agentID",
          "url"
        ],
        "type": "object",
        "properties": {
          "agentID": {
            "type": "string",
            "format": "uuid"
          },
          "url": {
            "type": "string",
            "description": "URL is the URL of the reconnecting-pty endpoint you are connecting to."
          }
        }
      },
      "wirtualsdk.IssueReconnectingPTYSignedTokenResponse": {
        "type": "object",
        "properties": {
          "signed_token": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.JFrogXrayScan": {
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string",
            "format": "uuid"
          },
          "critical": {
            "type": "integer"
          },
          "high": {
            "type": "integer"
          },
          "medium": {
            "type": "integer"
          },
          "results_url": {
            "type": "string"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.JobErrorCode": {
        "type": "string",
        "enum": [
          "REQUIRED_TEMPLATE_VARIABLES"
        ],
        "x-enum-varnames": [
          "RequiredTemplateVariables"
        ]
      },
      "wirtualsdk.License": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "object",
            "additionalProperties": true,
            "description": "Claims are the JWT claims asserted by the license.  Here we use\na generic string map to ensure that all data from the server is\nparsed verbatim, not just the fields this version of Wirtual\nunderstands."
          },
          "id": {
            "type": "integer"
          },
          "uploaded_at": {
            "type": "string",
            "format": "date-time"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.LinkConfig": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string",
            "enum": [
              "bug",
              "chat",
              "docs"
            ]
          },
          "name": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.LogLevel": {
        "type": "string",
        "enum": [
          "trace",
          "debug",
          "info",
          "warn",
          "error"
        ],
        "x-enum-varnames": [
          "LogLevelTrace",
          "LogLevelDebug",
          "LogLevelInfo",
          "LogLevelWarn",
          "LogLevelError"
        ]
      },
      "wirtualsdk.LogSource": {
        "type": "string",
        "enum": [
          "provisioner_daemon",
          "provisioner"
        ],
        "x-enum-varnames": [
          "LogSourceProvisionerDaemon",
          "LogSourceProvisioner"
        ]
      },
      "wirtualsdk.LoggingConfig": {
        "type": "object",
        "properties": {
          "human": {
            "type": "string"
          },
          "json": {
            "type": "string"
          },
          "log_filter": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stackdriver": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.LoginType": {
        "type": "string",
        "enum": [
          "",
          "password",
          "github",
          "oidc",
          "token",
          "none"
        ],
        "x-enum-varnames": [
          "LoginTypeUnknown",
          "LoginTypePassword",
          "LoginTypeGithub",
          "LoginTypeOIDC",
          "LoginTypeToken",
          "LoginTypeNone"
        ]
      },
      "wirtualsdk.LoginWithPasswordRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.LoginWithPasswordResponse": {
        "required": [
          "session_token"
        ],
        "type": "object",
        "properties": {
          "session_token": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.MatchedProvisioners": {
        "type": "object",
        "properties": {
          "available": {
            "type": "integer",
            "description": "Available is the number of provisioner daemons that are available to\ntake jobs. This may be less than the count if some provisioners are\nbusy or have been stopped."
          },
          "count": {
            "type": "integer",
            "description": "Count is the number of provisioner daemons that matched the given\ntags. If the count is 0, it means no provisioner daemons matched the\nrequested tags."
          },
          "most_recently_seen": {
            "type": "string",
            "description": "MostRecentlySeen is the most recently seen time of the set of matched\nprovisioners. If no provisioners matched, this field will be null.",
            "format": "date-time"
          }
        }
      },
      "wirtualsdk.MinimalOrganization": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.MinimalUser": {
        "required": [
          "id",
          "username"
        ],
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.NotificationMethodsResponse": {
        "type": "object",
        "properties": {
          "available": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.NotificationPreference": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "wirtualsdk.NotificationTemplate": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "string"
          },
          "body_template": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "title_template": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.NotificationsConfig": {
        "type": "object",
        "properties": {
          "dispatch_timeout": {
            "type": "integer",
            "description": "How long to wait while a notification is being sent before giving up."
          },
          "email": {
            "type": "object",
            "description": "SMTP settings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.NotificationsEmailConfig"
              }
            ]
          },
          "fetch_interval": {
            "type": "integer",
            "description": "How often to query the database for queued notifications."
          },
          "lease_count": {
            "type": "integer",
            "description": "How many notifications a notifier should lease per fetch interval."
          },
          "lease_period": {
            "type": "integer",
            "description": "How long a notifier should lease a message. This is effectively how long a notification is 'owned'\nby a notifier, and once this period expires it will be available for lease by another notifier. Leasing\nis important in order for multiple running notifiers to not pick the same messages to deliver concurrently.\nThis lease period will only expire if a notifier shuts down ungracefully; a dispatch of the notification\nreleases the lease."
          },
          "max_send_attempts": {
            "type": "integer",
            "description": "The upper limit of attempts to send a notification."
          },
          "method": {
            "type": "string",
            "description": "Which delivery method to use (available options: 'smtp', 'webhook')."
          },
          "retry_interval": {
            "type": "integer",
            "description": "The minimum time between retries."
          },
          "sync_buffer_size": {
            "type": "integer",
            "description": "The notifications system buffers message updates in memory to ease pressure on the database.\nThis option controls how many updates are kept in memory. The lower this value the\nlower the change of state inconsistency in a non-graceful shutdown - but it also increases load on the\ndatabase. It is recommended to keep this option at its default value."
          },
          "sync_interval": {
            "type": "integer",
            "description": "The notifications system buffers message updates in memory to ease pressure on the database.\nThis option controls how often it synchronizes its state with the database. The shorter this value the\nlower the change of state inconsistency in a non-graceful shutdown - but it also increases load on the\ndatabase. It is recommended to keep this option at its default value."
          },
          "webhook": {
            "type": "object",
            "description": "Webhook settings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.NotificationsWebhookConfig"
              }
            ]
          }
        }
      },
      "wirtualsdk.NotificationsEmailAuthConfig": {
        "type": "object",
        "properties": {
          "identity": {
            "type": "string",
            "description": "Identity for PLAIN auth."
          },
          "password": {
            "type": "string",
            "description": "Password for LOGIN/PLAIN auth."
          },
          "password_file": {
            "type": "string",
            "description": "File from which to load the password for LOGIN/PLAIN auth."
          },
          "username": {
            "type": "string",
            "description": "Username for LOGIN/PLAIN auth."
          }
        }
      },
      "wirtualsdk.NotificationsEmailConfig": {
        "type": "object",
        "properties": {
          "auth": {
            "type": "object",
            "description": "Authentication details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.NotificationsEmailAuthConfig"
              }
            ]
          },
          "force_tls": {
            "type": "boolean",
            "description": "ForceTLS causes a TLS connection to be attempted."
          },
          "from": {
            "type": "string",
            "description": "The sender's address."
          },
          "hello": {
            "type": "string",
            "description": "The hostname identifying the SMTP server."
          },
          "smarthost": {
            "type": "string",
            "description": "The intermediary SMTP host through which emails are sent (host:port)."
          },
          "tls": {
            "type": "object",
            "description": "TLS details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.NotificationsEmailTLSConfig"
              }
            ]
          }
        }
      },
      "wirtualsdk.NotificationsEmailTLSConfig": {
        "type": "object",
        "properties": {
          "ca_file": {
            "type": "string",
            "description": "CAFile specifies the location of the CA certificate to use."
          },
          "cert_file": {
            "type": "string",
            "description": "CertFile specifies the location of the certificate to use."
          },
          "insecure_skip_verify": {
            "type": "boolean",
            "description": "InsecureSkipVerify skips target certificate validation."
          },
          "key_file": {
            "type": "string",
            "description": "KeyFile specifies the location of the key to use."
          },
          "server_name": {
            "type": "string",
            "description": "ServerName to verify the hostname for the targets."
          },
          "start_tls": {
            "type": "boolean",
            "description": "StartTLS attempts to upgrade plain connections to TLS."
          }
        }
      },
      "wirtualsdk.NotificationsSettings": {
        "type": "object",
        "properties": {
          "notifier_paused": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.NotificationsWebhookConfig": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "object",
            "description": "The URL to which the payload will be sent with an HTTP POST request.",
            "allOf": [
              {
                "$ref": "#/components/schemas/serpent.URL"
              }
            ]
          }
        }
      },
      "wirtualsdk.OAuth2AppEndpoints": {
        "type": "object",
        "properties": {
          "authorization": {
            "type": "string"
          },
          "device_authorization": {
            "type": "string",
            "description": "DeviceAuth is optional."
          },
          "token": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.OAuth2Config": {
        "type": "object",
        "properties": {
          "github": {
            "$ref": "#/components/schemas/wirtualsdk.OAuth2GithubConfig"
          }
        }
      },
      "wirtualsdk.OAuth2GithubConfig": {
        "type": "object",
        "properties": {
          "allow_everyone": {
            "type": "boolean"
          },
          "allow_signups": {
            "type": "boolean"
          },
          "allowed_orgs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_teams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "enterprise_base_url": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.OAuth2ProviderApp": {
        "type": "object",
        "properties": {
          "callback_url": {
            "type": "string"
          },
          "endpoints": {
            "type": "object",
            "description": "Endpoints are included in the app response for easier discovery. The OAuth2\nspec does not have a defined place to find these (for comparison, OIDC has\na '/.well-known/openid-configuration' endpoint).",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.OAuth2AppEndpoints"
              }
            ]
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.OAuth2ProviderAppSecret": {
        "type": "object",
        "properties": {
          "client_secret_truncated": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "last_used_at": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.OAuth2ProviderAppSecretFull": {
        "type": "object",
        "properties": {
          "client_secret_full": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.OAuthConversionResponse": {
        "type": "object",
        "properties": {
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "state_string": {
            "type": "string"
          },
          "to_type": {
            "$ref": "#/components/schemas/wirtualsdk.LoginType"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.OIDCAuthMethod": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "iconUrl": {
            "type": "string"
          },
          "signInText": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.OIDCConfig": {
        "type": "object",
        "properties": {
          "allow_signups": {
            "type": "boolean"
          },
          "auth_url_params": {
            "type": "object",
            "properties": {}
          },
          "client_cert_file": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "client_key_file": {
            "type": "string",
            "description": "ClientKeyFile & ClientCertFile are used in place of ClientSecret for PKI auth."
          },
          "client_secret": {
            "type": "string"
          },
          "email_domain": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email_field": {
            "type": "string"
          },
          "group_allow_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "group_auto_create": {
            "type": "boolean"
          },
          "group_mapping": {
            "type": "object",
            "properties": {}
          },
          "group_regex_filter": {
            "$ref": "#/components/schemas/serpent.Regexp"
          },
          "groups_field": {
            "type": "string"
          },
          "icon_url": {
            "$ref": "#/components/schemas/serpent.URL"
          },
          "ignore_email_verified": {
            "type": "boolean"
          },
          "ignore_user_info": {
            "type": "boolean"
          },
          "issuer_url": {
            "type": "string"
          },
          "name_field": {
            "type": "string"
          },
          "organization_assign_default": {
            "type": "boolean"
          },
          "organization_field": {
            "type": "string"
          },
          "organization_mapping": {
            "type": "object",
            "properties": {}
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sign_in_text": {
            "type": "string"
          },
          "signups_disabled_text": {
            "type": "string"
          },
          "skip_issuer_checks": {
            "type": "boolean"
          },
          "user_role_field": {
            "type": "string"
          },
          "user_role_mapping": {
            "type": "object",
            "properties": {}
          },
          "user_roles_default": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "username_field": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.Organization": {
        "required": [
          "created_at",
          "id",
          "is_default",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "is_default": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "wirtualsdk.OrganizationMember": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.SlimRole"
            }
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.OrganizationMemberWithUserData": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "global_roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.SlimRole"
            }
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.SlimRole"
            }
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.OrganizationSyncSettings": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field selects the claim field to be used as the created user's\norganizations. If the field is the empty string, then no organization\nupdates will ever come from the OIDC provider."
          },
          "mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Mapping maps from an OIDC claim --> Wirtual organization uuid"
          },
          "organization_assign_default": {
            "type": "boolean",
            "description": "AssignDefault will ensure the default org is always included\nfor every user, regardless of their claims. This preserves legacy behavior."
          }
        }
      },
      "wirtualsdk.PatchGroupRequest": {
        "type": "object",
        "properties": {
          "add_users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "avatar_url": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "quota_allowance": {
            "type": "integer"
          },
          "remove_users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "wirtualsdk.PatchTemplateVersionRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.PatchWorkspaceProxy": {
        "required": [
          "display_name",
          "icon",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "regenerate_token": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.Permission": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/wirtualsdk.RBACAction"
          },
          "negate": {
            "type": "boolean",
            "description": "Negate makes this a negative permission"
          },
          "resource_type": {
            "$ref": "#/components/schemas/wirtualsdk.RBACResource"
          }
        }
      },
      "wirtualsdk.PostOAuth2ProviderAppRequest": {
        "required": [
          "callback_url",
          "name"
        ],
        "type": "object",
        "properties": {
          "callback_url": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.PostWorkspaceUsageRequest": {
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string",
            "format": "uuid"
          },
          "app_name": {
            "$ref": "#/components/schemas/wirtualsdk.UsageAppName"
          }
        }
      },
      "wirtualsdk.PprofConfig": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/serpent.HostPort"
          },
          "enable": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.PrometheusConfig": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/serpent.HostPort"
          },
          "aggregate_agent_stats_by": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "collect_agent_stats": {
            "type": "boolean"
          },
          "collect_db_metrics": {
            "type": "boolean"
          },
          "enable": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.ProvisionerConfig": {
        "type": "object",
        "properties": {
          "daemon_poll_interval": {
            "type": "integer"
          },
          "daemon_poll_jitter": {
            "type": "integer"
          },
          "daemon_psk": {
            "type": "string"
          },
          "daemon_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "daemons": {
            "type": "integer",
            "description": "Daemons is the number of built-in terraform provisioners."
          },
          "force_cancel_interval": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.ProvisionerDaemon": {
        "type": "object",
        "properties": {
          "api_version": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "key_id": {
            "type": "string",
            "format": "uuid"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "provisioners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.ProvisionerJob": {
        "type": "object",
        "properties": {
          "canceled_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "type": "string"
          },
          "error_code": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.JobErrorCode"
              }
            ]
          },
          "file_id": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "queue_position": {
            "type": "integer"
          },
          "queue_size": {
            "type": "integer"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.ProvisionerJobStatus"
              }
            ]
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "worker_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.ProvisionerJobLog": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer"
          },
          "log_level": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.LogLevel"
              }
            ]
          },
          "log_source": {
            "$ref": "#/components/schemas/wirtualsdk.LogSource"
          },
          "output": {
            "type": "string"
          },
          "stage": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.ProvisionerJobStatus": {
        "type": "string",
        "enum": [
          "pending",
          "running",
          "succeeded",
          "canceling",
          "canceled",
          "failed",
          "unknown"
        ],
        "x-enum-varnames": [
          "ProvisionerJobPending",
          "ProvisionerJobRunning",
          "ProvisionerJobSucceeded",
          "ProvisionerJobCanceling",
          "ProvisionerJobCanceled",
          "ProvisionerJobFailed",
          "ProvisionerJobUnknown"
        ]
      },
      "wirtualsdk.ProvisionerKey": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string",
            "format": "uuid"
          },
          "tags": {
            "$ref": "#/components/schemas/wirtualsdk.ProvisionerKeyTags"
          }
        }
      },
      "wirtualsdk.ProvisionerKeyDaemons": {
        "type": "object",
        "properties": {
          "daemons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.ProvisionerDaemon"
            }
          },
          "key": {
            "$ref": "#/components/schemas/wirtualsdk.ProvisionerKey"
          }
        }
      },
      "wirtualsdk.ProvisionerKeyTags": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "wirtualsdk.ProvisionerLogLevel": {
        "type": "string",
        "enum": [
          "debug"
        ],
        "x-enum-varnames": [
          "ProvisionerLogLevelDebug"
        ]
      },
      "wirtualsdk.ProvisionerStorageMethod": {
        "type": "string",
        "enum": [
          "file"
        ],
        "x-enum-varnames": [
          "ProvisionerStorageMethodFile"
        ]
      },
      "wirtualsdk.ProvisionerTiming": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time"
          },
          "job_id": {
            "type": "string",
            "format": "uuid"
          },
          "resource": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "stage": {
            "$ref": "#/components/schemas/wirtualsdk.TimingStage"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "wirtualsdk.ProxyHealthReport": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "description": "Errors are problems that prevent the workspace proxy from being healthy",
            "items": {
              "type": "string"
            }
          },
          "warnings": {
            "type": "array",
            "description": "Warnings do not prevent the workspace proxy from being healthy, but\nshould be addressed.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "wirtualsdk.ProxyHealthStatus": {
        "type": "string",
        "enum": [
          "ok",
          "unreachable",
          "unhealthy",
          "unregistered"
        ],
        "x-enum-varnames": [
          "ProxyHealthy",
          "ProxyUnreachable",
          "ProxyUnhealthy",
          "ProxyUnregistered"
        ]
      },
      "wirtualsdk.PutExtendWorkspaceRequest": {
        "required": [
          "deadline"
        ],
        "type": "object",
        "properties": {
          "deadline": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "wirtualsdk.PutOAuth2ProviderAppRequest": {
        "required": [
          "callback_url",
          "name"
        ],
        "type": "object",
        "properties": {
          "callback_url": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.RBACAction": {
        "type": "string",
        "enum": [
          "application_connect",
          "assign",
          "create",
          "delete",
          "read",
          "read_personal",
          "ssh",
          "update",
          "update_personal",
          "use",
          "view_insights",
          "start",
          "stop"
        ],
        "x-enum-varnames": [
          "ActionApplicationConnect",
          "ActionAssign",
          "ActionCreate",
          "ActionDelete",
          "ActionRead",
          "ActionReadPersonal",
          "ActionSSH",
          "ActionUpdate",
          "ActionUpdatePersonal",
          "ActionUse",
          "ActionViewInsights",
          "ActionWorkspaceStart",
          "ActionWorkspaceStop"
        ]
      },
      "wirtualsdk.RBACResource": {
        "type": "string",
        "enum": [
          "*",
          "api_key",
          "assign_org_role",
          "assign_role",
          "audit_log",
          "crypto_key",
          "debug_info",
          "deployment_config",
          "deployment_stats",
          "file",
          "group",
          "group_member",
          "idpsync_settings",
          "license",
          "notification_message",
          "notification_preference",
          "notification_template",
          "oauth2_app",
          "oauth2_app_code_token",
          "oauth2_app_secret",
          "organization",
          "organization_member",
          "provisioner_daemon",
          "provisioner_keys",
          "replicas",
          "system",
          "tailnet_coordinator",
          "template",
          "user",
          "workspace",
          "workspace_dormant",
          "workspace_proxy"
        ],
        "x-enum-varnames": [
          "ResourceWildcard",
          "ResourceApiKey",
          "ResourceAssignOrgRole",
          "ResourceAssignRole",
          "ResourceAuditLog",
          "ResourceCryptoKey",
          "ResourceDebugInfo",
          "ResourceDeploymentConfig",
          "ResourceDeploymentStats",
          "ResourceFile",
          "ResourceGroup",
          "ResourceGroupMember",
          "ResourceIdpsyncSettings",
          "ResourceLicense",
          "ResourceNotificationMessage",
          "ResourceNotificationPreference",
          "ResourceNotificationTemplate",
          "ResourceOauth2App",
          "ResourceOauth2AppCodeToken",
          "ResourceOauth2AppSecret",
          "ResourceOrganization",
          "ResourceOrganizationMember",
          "ResourceProvisionerDaemon",
          "ResourceProvisionerKeys",
          "ResourceReplicas",
          "ResourceSystem",
          "ResourceTailnetCoordinator",
          "ResourceTemplate",
          "ResourceUser",
          "ResourceWorkspace",
          "ResourceWorkspaceDormant",
          "ResourceWorkspaceProxy"
        ]
      },
      "wirtualsdk.RateLimitConfig": {
        "type": "object",
        "properties": {
          "api": {
            "type": "integer"
          },
          "disable_all": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.ReducedUser": {
        "required": [
          "created_at",
          "email",
          "id",
          "username"
        ],
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time"
          },
          "login_type": {
            "$ref": "#/components/schemas/wirtualsdk.LoginType"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.UserStatus"
              }
            ]
          },
          "theme_preference": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.Region": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean"
          },
          "icon_url": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "path_app_url": {
            "type": "string",
            "description": "PathAppURL is the URL to the base path for path apps. Optional\nunless wildcard_hostname is set.\nE.g. https://us.example.com"
          },
          "wildcard_hostname": {
            "type": "string",
            "description": "WildcardHostname is the wildcard hostname for subdomain apps.\nE.g. *.us.example.com\nE.g. *--suffix.au.example.com\nOptional. Does not need to be on the same domain as PathAppURL."
          }
        }
      },
      "wirtualsdk.RegionsResponse-wirtualsdk_Region": {
        "type": "object",
        "properties": {
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Region"
            }
          }
        }
      },
      "wirtualsdk.RegionsResponse-wirtualsdk_WorkspaceProxy": {
        "type": "object",
        "properties": {
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceProxy"
            }
          }
        }
      },
      "wirtualsdk.Replica": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "CreatedAt is the timestamp when the replica was first seen.",
            "format": "date-time"
          },
          "database_latency": {
            "type": "integer",
            "description": "DatabaseLatency is the latency in microseconds to the database."
          },
          "error": {
            "type": "string",
            "description": "Error is the replica error."
          },
          "hostname": {
            "type": "string",
            "description": "Hostname is the hostname of the replica."
          },
          "id": {
            "type": "string",
            "description": "ID is the unique identifier for the replica.",
            "format": "uuid"
          },
          "region_id": {
            "type": "integer",
            "description": "RegionID is the region of the replica."
          },
          "relay_address": {
            "type": "string",
            "description": "RelayAddress is the accessible address to relay DERP connections."
          }
        }
      },
      "wirtualsdk.RequestOneTimePasscodeRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "wirtualsdk.ResolveAutostartResponse": {
        "type": "object",
        "properties": {
          "parameter_mismatch": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.ResourceType": {
        "type": "string",
        "enum": [
          "template",
          "template_version",
          "user",
          "workspace",
          "workspace_build",
          "git_ssh_key",
          "api_key",
          "group",
          "license",
          "convert_login",
          "health_settings",
          "notifications_settings",
          "workspace_proxy",
          "organization",
          "oauth2_provider_app",
          "oauth2_provider_app_secret",
          "custom_role"
        ],
        "x-enum-varnames": [
          "ResourceTypeTemplate",
          "ResourceTypeTemplateVersion",
          "ResourceTypeUser",
          "ResourceTypeWorkspace",
          "ResourceTypeWorkspaceBuild",
          "ResourceTypeGitSSHKey",
          "ResourceTypeAPIKey",
          "ResourceTypeGroup",
          "ResourceTypeLicense",
          "ResourceTypeConvertLogin",
          "ResourceTypeHealthSettings",
          "ResourceTypeNotificationsSettings",
          "ResourceTypeWorkspaceProxy",
          "ResourceTypeOrganization",
          "ResourceTypeOAuth2ProviderApp",
          "ResourceTypeOAuth2ProviderAppSecret",
          "ResourceTypeCustomRole"
        ]
      },
      "wirtualsdk.Response": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "description": "Detail is a debug message that provides further insight into why the\naction failed. This information can be technical and a regular golang\nerr.Error() text.\n- \"database: too many open connections\"\n- \"stat: too many open files\""
          },
          "message": {
            "type": "string",
            "description": "Message is an actionable message that depicts actions the request took.\nThese messages should be fully formed sentences with proper punctuation.\nExamples:\n- \"A user has been created.\"\n- \"Failed to create a user.\""
          },
          "validations": {
            "type": "array",
            "description": "Validations are form field-specific friendly error messages. They will be\nshown on a form field in the UI. These can also be used to add additional\ncontext if there is a set of errors in the primary 'Message'.",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.ValidationError"
            }
          }
        }
      },
      "wirtualsdk.Role": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_permissions": {
            "type": "array",
            "description": "OrganizationPermissions are specific for the organization in the field 'OrganizationID' above.",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Permission"
            }
          },
          "site_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Permission"
            }
          },
          "user_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Permission"
            }
          }
        }
      },
      "wirtualsdk.RoleSyncSettings": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field is the name of the claim field that specifies what organization roles\na user should be given. If empty, no roles will be synced."
          },
          "mapping": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Mapping is a map from OIDC groups to Wirtual organization roles."
          }
        }
      },
      "wirtualsdk.SSHConfig": {
        "type": "object",
        "properties": {
          "deploymentName": {
            "type": "string",
            "description": "DeploymentName is the config-ssh Hostname prefix"
          },
          "sshconfigOptions": {
            "type": "array",
            "description": "SSHConfigOptions are additional options to add to the ssh config file.\nThis will override defaults.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "wirtualsdk.SSHConfigResponse": {
        "type": "object",
        "properties": {
          "hostname_prefix": {
            "type": "string"
          },
          "ssh_config_options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "wirtualsdk.SessionCountDeploymentStats": {
        "type": "object",
        "properties": {
          "jetbrains": {
            "type": "integer"
          },
          "reconnecting_pty": {
            "type": "integer"
          },
          "ssh": {
            "type": "integer"
          },
          "vscode": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.SessionLifetime": {
        "type": "object",
        "properties": {
          "default_duration": {
            "type": "integer",
            "description": "DefaultDuration is only for browser, workspace app and oauth sessions."
          },
          "default_token_lifetime": {
            "type": "integer"
          },
          "disable_expiry_refresh": {
            "type": "boolean",
            "description": "DisableExpiryRefresh will disable automatically refreshing api\nkeys when they are used from the api. This means the api key lifetime at\ncreation is the lifetime of the api key."
          },
          "max_token_lifetime": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.SlimRole": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.SupportConfig": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/serpent.Struct-array_wirtualsdk_LinkConfig"
          }
        }
      },
      "wirtualsdk.SwaggerConfig": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.TLSConfig": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/serpent.HostPort"
          },
          "allow_insecure_ciphers": {
            "type": "boolean"
          },
          "cert_file": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "client_auth": {
            "type": "string"
          },
          "client_ca_file": {
            "type": "string"
          },
          "client_cert_file": {
            "type": "string"
          },
          "client_key_file": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "key_file": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "min_version": {
            "type": "string"
          },
          "redirect_http": {
            "type": "boolean"
          },
          "supported_ciphers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "wirtualsdk.TelemetryConfig": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          },
          "trace": {
            "type": "boolean"
          },
          "url": {
            "$ref": "#/components/schemas/serpent.URL"
          }
        }
      },
      "wirtualsdk.Template": {
        "type": "object",
        "properties": {
          "active_user_count": {
            "type": "integer",
            "description": "ActiveUserCount is set to -1 when loading."
          },
          "active_version_id": {
            "type": "string",
            "format": "uuid"
          },
          "activity_bump_ms": {
            "type": "integer"
          },
          "allow_user_autostart": {
            "type": "boolean",
            "description": "AllowUserAutostart and AllowUserAutostop are enterprise-only. Their\nvalues are only used if your license is entitled to use the advanced\ntemplate scheduling feature."
          },
          "allow_user_autostop": {
            "type": "boolean"
          },
          "allow_user_cancel_workspace_jobs": {
            "type": "boolean"
          },
          "autostart_requirement": {
            "$ref": "#/components/schemas/wirtualsdk.TemplateAutostartRequirement"
          },
          "autostop_requirement": {
            "type": "object",
            "description": "AutostopRequirement and AutostartRequirement are enterprise features. Its\nvalue is only used if your license is entitled to use the advanced template\nscheduling feature.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.TemplateAutostopRequirement"
              }
            ]
          },
          "build_time_stats": {
            "$ref": "#/components/schemas/wirtualsdk.TemplateBuildTimeStats"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_by_name": {
            "type": "string"
          },
          "default_ttl_ms": {
            "type": "integer"
          },
          "deprecated": {
            "type": "boolean"
          },
          "deprecation_message": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "failure_ttl_ms": {
            "type": "integer",
            "description": "FailureTTLMillis, TimeTilDormantMillis, and TimeTilDormantAutoDeleteMillis are enterprise-only. Their\nvalues are used if your license is entitled to use the advanced\ntemplate scheduling feature."
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "max_port_share_level": {
            "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentPortShareLevel"
          },
          "name": {
            "type": "string"
          },
          "organization_display_name": {
            "type": "string"
          },
          "organization_icon": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_name": {
            "type": "string",
            "format": "url"
          },
          "provisioner": {
            "type": "string",
            "enum": [
              "terraform"
            ]
          },
          "require_active_version": {
            "type": "boolean",
            "description": "RequireActiveVersion mandates that workspaces are built with the active\ntemplate version."
          },
          "time_til_dormant_autodelete_ms": {
            "type": "integer"
          },
          "time_til_dormant_ms": {
            "type": "integer"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "wirtualsdk.TemplateAppUsage": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "example": "Visual Studio Code"
          },
          "icon": {
            "type": "string"
          },
          "seconds": {
            "type": "integer",
            "example": 80500
          },
          "slug": {
            "type": "string",
            "example": "vscode"
          },
          "template_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "times_used": {
            "type": "integer",
            "example": 2
          },
          "type": {
            "type": "object",
            "example": "builtin",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.TemplateAppsType"
              }
            ]
          }
        }
      },
      "wirtualsdk.TemplateAppsType": {
        "type": "string",
        "enum": [
          "builtin",
          "app"
        ],
        "x-enum-varnames": [
          "TemplateAppsTypeBuiltin",
          "TemplateAppsTypeApp"
        ]
      },
      "wirtualsdk.TemplateAutostartRequirement": {
        "type": "object",
        "properties": {
          "days_of_week": {
            "type": "array",
            "description": "DaysOfWeek is a list of days of the week in which autostart is allowed\nto happen. If no days are specified, autostart is not allowed.",
            "items": {
              "type": "string",
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ]
            }
          }
        }
      },
      "wirtualsdk.TemplateAutostopRequirement": {
        "type": "object",
        "properties": {
          "days_of_week": {
            "type": "array",
            "description": "DaysOfWeek is a list of days of the week on which restarts are required.\nRestarts happen within the user's quiet hours (in their configured\ntimezone). If no days are specified, restarts are not required. Weekdays\ncannot be specified twice.\n\nRestarts will only happen on weekdays in this list on weeks which line up\nwith Weeks.",
            "items": {
              "type": "string",
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ]
            }
          },
          "weeks": {
            "type": "integer",
            "description": "Weeks is the number of weeks between required restarts. Weeks are synced\nacross all workspaces (and Wirtual deployments) using modulo math on a\nhardcoded epoch week of January 2nd, 2023 (the first Monday of 2023).\nValues of 0 or 1 indicate weekly restarts. Values of 2 indicate\nfortnightly restarts, etc."
          }
        }
      },
      "wirtualsdk.TemplateBuildTimeStats": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/wirtualsdk.TransitionStats"
        }
      },
      "wirtualsdk.TemplateExample": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "markdown": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.TemplateInsightsIntervalReport": {
        "type": "object",
        "properties": {
          "active_users": {
            "type": "integer",
            "example": 14
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "interval": {
            "type": "object",
            "example": "week",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.InsightsReportInterval"
              }
            ]
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "template_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "wirtualsdk.TemplateInsightsReport": {
        "type": "object",
        "properties": {
          "active_users": {
            "type": "integer",
            "example": 22
          },
          "apps_usage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.TemplateAppUsage"
            }
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "parameters_usage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.TemplateParameterUsage"
            }
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "template_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "wirtualsdk.TemplateInsightsResponse": {
        "type": "object",
        "properties": {
          "interval_reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.TemplateInsightsIntervalReport"
            }
          },
          "report": {
            "$ref": "#/components/schemas/wirtualsdk.TemplateInsightsReport"
          }
        }
      },
      "wirtualsdk.TemplateParameterUsage": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.TemplateVersionParameterOption"
            }
          },
          "template_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "type": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.TemplateParameterValue"
            }
          }
        }
      },
      "wirtualsdk.TemplateParameterValue": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.TemplateRole": {
        "type": "string",
        "enum": [
          "admin",
          "use",
          ""
        ],
        "x-enum-varnames": [
          "TemplateRoleAdmin",
          "TemplateRoleUse",
          "TemplateRoleDeleted"
        ]
      },
      "wirtualsdk.TemplateUser": {
        "required": [
          "created_at",
          "email",
          "id",
          "username"
        ],
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time"
          },
          "login_type": {
            "$ref": "#/components/schemas/wirtualsdk.LoginType"
          },
          "name": {
            "type": "string"
          },
          "organization_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "role": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.TemplateRole"
              }
            ]
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.SlimRole"
            }
          },
          "status": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.UserStatus"
              }
            ]
          },
          "theme_preference": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.TemplateVersion": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "$ref": "#/components/schemas/wirtualsdk.MinimalUser"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "job": {
            "$ref": "#/components/schemas/wirtualsdk.ProvisionerJob"
          },
          "matched_provisioners": {
            "$ref": "#/components/schemas/wirtualsdk.MatchedProvisioners"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "readme": {
            "type": "string"
          },
          "template_id": {
            "type": "string",
            "format": "uuid"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.TemplateVersionWarning"
            }
          }
        }
      },
      "wirtualsdk.TemplateVersionExternalAuth": {
        "type": "object",
        "properties": {
          "authenticate_url": {
            "type": "string"
          },
          "authenticated": {
            "type": "boolean"
          },
          "display_icon": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "optional": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.TemplateVersionParameter": {
        "type": "object",
        "properties": {
          "default_value": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "description_plaintext": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "ephemeral": {
            "type": "boolean"
          },
          "icon": {
            "type": "string"
          },
          "mutable": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.TemplateVersionParameterOption"
            }
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "bool",
              "list(string)"
            ]
          },
          "validation_error": {
            "type": "string"
          },
          "validation_max": {
            "type": "integer"
          },
          "validation_min": {
            "type": "integer"
          },
          "validation_monotonic": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.ValidationMonotonicOrder"
              }
            ]
          },
          "validation_regex": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.TemplateVersionParameterOption": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.TemplateVersionVariable": {
        "type": "object",
        "properties": {
          "default_value": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "sensitive": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "bool"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.TemplateVersionWarning": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_WORKSPACES"
        ],
        "x-enum-varnames": [
          "TemplateVersionWarningUnsupportedWorkspaces"
        ]
      },
      "wirtualsdk.TimingStage": {
        "type": "string",
        "enum": [
          "init",
          "plan",
          "graph",
          "apply",
          "start",
          "stop",
          "cron",
          "connect"
        ],
        "x-enum-varnames": [
          "TimingStageInit",
          "TimingStagePlan",
          "TimingStageGraph",
          "TimingStageApply",
          "TimingStageStart",
          "TimingStageStop",
          "TimingStageCron",
          "TimingStageConnect"
        ]
      },
      "wirtualsdk.TokenConfig": {
        "type": "object",
        "properties": {
          "max_token_lifetime": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.TraceConfig": {
        "type": "object",
        "properties": {
          "capture_logs": {
            "type": "boolean"
          },
          "data_dog": {
            "type": "boolean"
          },
          "enable": {
            "type": "boolean"
          },
          "honeycomb_api_key": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.TransitionStats": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "integer",
            "example": 123
          },
          "p95": {
            "type": "integer",
            "example": 146
          }
        }
      },
      "wirtualsdk.UpdateActiveTemplateVersion": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.UpdateAppearanceConfig": {
        "type": "object",
        "properties": {
          "announcement_banners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.BannerConfig"
            }
          },
          "application_name": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "service_banner": {
            "type": "object",
            "description": "Deprecated: ServiceBanner has been replaced by AnnouncementBanners.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.BannerConfig"
              }
            ]
          }
        }
      },
      "wirtualsdk.UpdateCheckResponse": {
        "type": "object",
        "properties": {
          "current": {
            "type": "boolean",
            "description": "Current indicates whether the server version is the same as the latest."
          },
          "url": {
            "type": "string",
            "description": "URL to download the latest release of Wirtual."
          },
          "version": {
            "type": "string",
            "description": "Version is the semantic version for the latest release of Wirtual."
          }
        }
      },
      "wirtualsdk.UpdateOrganizationRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UpdateRoles": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "wirtualsdk.UpdateTemplateACL": {
        "type": "object",
        "properties": {
          "group_perms": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/wirtualsdk.TemplateRole"
            },
            "description": "GroupPerms should be a mapping of group id to role.",
            "example": {
              "8bd26b20-f3e8-48be-a903-46bb920cf671": "use",
              "<user_id>>": "admin"
            }
          },
          "user_perms": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/wirtualsdk.TemplateRole"
            },
            "description": "UserPerms should be a mapping of user id to role. The user id must be the\nuuid of the user, not a username or email address.",
            "example": {
              "4df59e74-c027-470b-ab4d-cbba8963a5e9": "use",
              "<group_id>": "admin"
            }
          }
        }
      },
      "wirtualsdk.UpdateUserAppearanceSettingsRequest": {
        "required": [
          "theme_preference"
        ],
        "type": "object",
        "properties": {
          "theme_preference": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UpdateUserNotificationPreferences": {
        "type": "object",
        "properties": {
          "template_disabled_map": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "wirtualsdk.UpdateUserPasswordRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "old_password": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UpdateUserProfileRequest": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UpdateUserQuietHoursScheduleRequest": {
        "required": [
          "schedule"
        ],
        "type": "object",
        "properties": {
          "schedule": {
            "type": "string",
            "description": "Schedule is a cron expression that defines when the user's quiet hours\nwindow is. Schedule must not be empty. For new users, the schedule is set\nto 2am in their browser or computer's timezone. The schedule denotes the\nbeginning of a 4 hour window where the workspace is allowed to\nautomatically stop or restart due to maintenance or template schedule.\n\nThe schedule must be daily with a single time, and should have a timezone\nspecified via a CRON_TZ prefix (otherwise UTC will be used).\n\nIf the schedule is empty, the user will be updated to use the default\nschedule."
          }
        }
      },
      "wirtualsdk.UpdateWorkspaceAutomaticUpdatesRequest": {
        "type": "object",
        "properties": {
          "automatic_updates": {
            "$ref": "#/components/schemas/wirtualsdk.AutomaticUpdates"
          }
        }
      },
      "wirtualsdk.UpdateWorkspaceAutostartRequest": {
        "type": "object",
        "properties": {
          "schedule": {
            "type": "string",
            "description": "Schedule is expected to be of the form `CRON_TZ=<IANA Timezone> <min> <hour> * * <dow>`\nExample: `CRON_TZ=US/Central 30 9 * * 1-5` represents 0930 in the timezone US/Central\non weekdays (Mon-Fri). `CRON_TZ` defaults to UTC if not present."
          }
        }
      },
      "wirtualsdk.UpdateWorkspaceDormancy": {
        "type": "object",
        "properties": {
          "dormant": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.UpdateWorkspaceRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UpdateWorkspaceTTLRequest": {
        "type": "object",
        "properties": {
          "ttl_ms": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.UploadResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.UpsertWorkspaceAgentPortShareRequest": {
        "type": "object",
        "properties": {
          "agent_name": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "protocol": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentPortShareProtocol"
              }
            ]
          },
          "share_level": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentPortShareLevel"
              }
            ]
          }
        }
      },
      "wirtualsdk.UsageAppName": {
        "type": "string",
        "enum": [
          "vscode",
          "jetbrains",
          "reconnecting-pty",
          "ssh"
        ],
        "x-enum-varnames": [
          "UsageAppNameVscode",
          "UsageAppNameJetbrains",
          "UsageAppNameReconnectingPty",
          "UsageAppNameSSH"
        ]
      },
      "wirtualsdk.User": {
        "required": [
          "created_at",
          "email",
          "id",
          "username"
        ],
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time"
          },
          "login_type": {
            "$ref": "#/components/schemas/wirtualsdk.LoginType"
          },
          "name": {
            "type": "string"
          },
          "organization_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.SlimRole"
            }
          },
          "status": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.UserStatus"
              }
            ]
          },
          "theme_preference": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UserActivity": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "seconds": {
            "type": "integer",
            "example": 80500
          },
          "template_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UserActivityInsightsReport": {
        "type": "object",
        "properties": {
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "template_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.UserActivity"
            }
          }
        }
      },
      "wirtualsdk.UserActivityInsightsResponse": {
        "type": "object",
        "properties": {
          "report": {
            "$ref": "#/components/schemas/wirtualsdk.UserActivityInsightsReport"
          }
        }
      },
      "wirtualsdk.UserLatency": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "latency_ms": {
            "$ref": "#/components/schemas/wirtualsdk.ConnectionLatency"
          },
          "template_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UserLatencyInsightsReport": {
        "type": "object",
        "properties": {
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "template_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.UserLatency"
            }
          }
        }
      },
      "wirtualsdk.UserLatencyInsightsResponse": {
        "type": "object",
        "properties": {
          "report": {
            "$ref": "#/components/schemas/wirtualsdk.UserLatencyInsightsReport"
          }
        }
      },
      "wirtualsdk.UserLoginType": {
        "type": "object",
        "properties": {
          "login_type": {
            "$ref": "#/components/schemas/wirtualsdk.LoginType"
          }
        }
      },
      "wirtualsdk.UserParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UserQuietHoursScheduleConfig": {
        "type": "object",
        "properties": {
          "allow_user_custom": {
            "type": "boolean"
          },
          "default_schedule": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.UserQuietHoursScheduleResponse": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "description": "Next is the next time that the quiet hours window will start.",
            "format": "date-time"
          },
          "raw_schedule": {
            "type": "string"
          },
          "time": {
            "type": "string",
            "description": "Time is the time of day that the quiet hours window starts in the given\nTimezone each day."
          },
          "timezone": {
            "type": "string",
            "description": "raw format from the cron expression, UTC if unspecified"
          },
          "user_can_set": {
            "type": "boolean",
            "description": "UserCanSet is true if the user is allowed to set their own quiet hours\nschedule. If false, the user cannot set a custom schedule and the default\nschedule will always be used."
          },
          "user_set": {
            "type": "boolean",
            "description": "UserSet is true if the user has set their own quiet hours schedule. If\nfalse, the user is using the default schedule."
          }
        }
      },
      "wirtualsdk.UserStatus": {
        "type": "string",
        "enum": [
          "active",
          "dormant",
          "suspended"
        ],
        "x-enum-varnames": [
          "UserStatusActive",
          "UserStatusDormant",
          "UserStatusSuspended"
        ]
      },
      "wirtualsdk.ValidateUserPasswordRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.ValidateUserPasswordResponse": {
        "type": "object",
        "properties": {
          "details": {
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          }
        }
      },
      "wirtualsdk.ValidationError": {
        "required": [
          "detail",
          "field"
        ],
        "type": "object",
        "properties": {
          "detail": {
            "type": "string"
          },
          "field": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.ValidationMonotonicOrder": {
        "type": "string",
        "enum": [
          "increasing",
          "decreasing"
        ],
        "x-enum-varnames": [
          "MonotonicOrderIncreasing",
          "MonotonicOrderDecreasing"
        ]
      },
      "wirtualsdk.VariableValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.Workspace": {
        "type": "object",
        "properties": {
          "allow_renames": {
            "type": "boolean"
          },
          "automatic_updates": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.AutomaticUpdates"
              }
            ]
          },
          "autostart_schedule": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleting_at": {
            "type": "string",
            "description": "DeletingAt indicates the time at which the workspace will be permanently deleted.\nA workspace is eligible for deletion if it is dormant (a non-nil dormant_at value)\nand a value has been specified for time_til_dormant_autodelete on its template.",
            "format": "date-time"
          },
          "dormant_at": {
            "type": "string",
            "description": "DormantAt being non-nil indicates a workspace that is dormant.\nA dormant workspace is no longer accessible must be activated.\nIt is subject to deletion if it breaches\nthe duration of the time_til_ field on its template.",
            "format": "date-time"
          },
          "favorite": {
            "type": "boolean"
          },
          "health": {
            "type": "object",
            "description": "Health shows the health of the workspace and information about\nwhat is causing an unhealthy status.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceHealth"
              }
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time"
          },
          "latest_build": {
            "$ref": "#/components/schemas/wirtualsdk.WorkspaceBuild"
          },
          "name": {
            "type": "string"
          },
          "next_start_at": {
            "type": "string",
            "format": "date-time"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_name": {
            "type": "string"
          },
          "outdated": {
            "type": "boolean"
          },
          "owner_avatar_url": {
            "type": "string"
          },
          "owner_id": {
            "type": "string",
            "format": "uuid"
          },
          "owner_name": {
            "type": "string"
          },
          "template_active_version_id": {
            "type": "string",
            "format": "uuid"
          },
          "template_allow_user_cancel_workspace_jobs": {
            "type": "boolean"
          },
          "template_display_name": {
            "type": "string"
          },
          "template_icon": {
            "type": "string"
          },
          "template_id": {
            "type": "string",
            "format": "uuid"
          },
          "template_name": {
            "type": "string"
          },
          "template_require_active_version": {
            "type": "boolean"
          },
          "ttl_ms": {
            "type": "integer"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "wirtualsdk.WorkspaceAgent": {
        "type": "object",
        "properties": {
          "api_version": {
            "type": "string"
          },
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceApp"
            }
          },
          "architecture": {
            "type": "string"
          },
          "connection_timeout_seconds": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "directory": {
            "type": "string"
          },
          "disconnected_at": {
            "type": "string",
            "format": "date-time"
          },
          "display_apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.DisplayApp"
            }
          },
          "environment_variables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "expanded_directory": {
            "type": "string"
          },
          "first_connected_at": {
            "type": "string",
            "format": "date-time"
          },
          "health": {
            "type": "object",
            "description": "Health reports the health of the agent.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentHealth"
              }
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "instance_id": {
            "type": "string"
          },
          "last_connected_at": {
            "type": "string",
            "format": "date-time"
          },
          "latency": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/wirtualsdk.DERPRegion"
            },
            "description": "DERPLatency is mapped by region name (e.g. \"New York City\", \"Seattle\")."
          },
          "lifecycle_state": {
            "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentLifecycle"
          },
          "log_sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentLogSource"
            }
          },
          "logs_length": {
            "type": "integer"
          },
          "logs_overflowed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "operating_system": {
            "type": "string"
          },
          "ready_at": {
            "type": "string",
            "format": "date-time"
          },
          "resource_id": {
            "type": "string",
            "format": "uuid"
          },
          "scripts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentScript"
            }
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "startup_script_behavior": {
            "type": "object",
            "description": "StartupScriptBehavior is a legacy field that is deprecated in favor\nof the `wirtual_script` resource. It's only referenced by old clients.\nDeprecated: Remove in the future!",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentStartupScriptBehavior"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentStatus"
          },
          "subsystems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.AgentSubsystem"
            }
          },
          "troubleshooting_url": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.WorkspaceAgentHealth": {
        "type": "object",
        "properties": {
          "healthy": {
            "type": "boolean",
            "description": "Healthy is true if the agent is healthy.",
            "example": false
          },
          "reason": {
            "type": "string",
            "description": "Reason is a human-readable explanation of the agent's health. It is empty if Healthy is true.",
            "example": "agent has lost connection"
          }
        }
      },
      "wirtualsdk.WorkspaceAgentLifecycle": {
        "type": "string",
        "enum": [
          "created",
          "starting",
          "start_timeout",
          "start_error",
          "ready",
          "shutting_down",
          "shutdown_timeout",
          "shutdown_error",
          "off"
        ],
        "x-enum-varnames": [
          "WorkspaceAgentLifecycleCreated",
          "WorkspaceAgentLifecycleStarting",
          "WorkspaceAgentLifecycleStartTimeout",
          "WorkspaceAgentLifecycleStartError",
          "WorkspaceAgentLifecycleReady",
          "WorkspaceAgentLifecycleShuttingDown",
          "WorkspaceAgentLifecycleShutdownTimeout",
          "WorkspaceAgentLifecycleShutdownError",
          "WorkspaceAgentLifecycleOff"
        ]
      },
      "wirtualsdk.WorkspaceAgentListeningPort": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "description": "only \"tcp\" at the moment"
          },
          "port": {
            "type": "integer"
          },
          "process_name": {
            "type": "string",
            "description": "may be empty"
          }
        }
      },
      "wirtualsdk.WorkspaceAgentListeningPortsResponse": {
        "type": "object",
        "properties": {
          "ports": {
            "type": "array",
            "description": "If there are no ports in the list, nothing should be displayed in the UI.\nThere must not be a \"no ports available\" message or anything similar, as\nthere will always be no ports displayed on platforms where our port\ndetection logic is unsupported.",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentListeningPort"
            }
          }
        }
      },
      "wirtualsdk.WorkspaceAgentLog": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer"
          },
          "level": {
            "$ref": "#/components/schemas/wirtualsdk.LogLevel"
          },
          "output": {
            "type": "string"
          },
          "source_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.WorkspaceAgentLogSource": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "display_name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "workspace_agent_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.WorkspaceAgentPortShare": {
        "type": "object",
        "properties": {
          "agent_name": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "protocol": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentPortShareProtocol"
              }
            ]
          },
          "share_level": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentPortShareLevel"
              }
            ]
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "wirtualsdk.WorkspaceAgentPortShareLevel": {
        "type": "string",
        "enum": [
          "owner",
          "authenticated",
          "public"
        ],
        "x-enum-varnames": [
          "WorkspaceAgentPortShareLevelOwner",
          "WorkspaceAgentPortShareLevelAuthenticated",
          "WorkspaceAgentPortShareLevelPublic"
        ]
      },
      "wirtualsdk.WorkspaceAgentPortShareProtocol": {
        "type": "string",
        "enum": [
          "http",
          "https"
        ],
        "x-enum-varnames": [
          "WorkspaceAgentPortShareProtocolHTTP",
          "WorkspaceAgentPortShareProtocolHTTPS"
        ]
      },
      "wirtualsdk.WorkspaceAgentPortShares": {
        "type": "object",
        "properties": {
          "shares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgentPortShare"
            }
          }
        }
      },
      "wirtualsdk.WorkspaceAgentScript": {
        "type": "object",
        "properties": {
          "cron": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "log_path": {
            "type": "string"
          },
          "log_source_id": {
            "type": "string",
            "format": "uuid"
          },
          "run_on_start": {
            "type": "boolean"
          },
          "run_on_stop": {
            "type": "boolean"
          },
          "script": {
            "type": "string"
          },
          "start_blocks_login": {
            "type": "boolean"
          },
          "timeout": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.WorkspaceAgentStartupScriptBehavior": {
        "type": "string",
        "enum": [
          "blocking",
          "non-blocking"
        ],
        "x-enum-varnames": [
          "WorkspaceAgentStartupScriptBehaviorBlocking",
          "WorkspaceAgentStartupScriptBehaviorNonBlocking"
        ]
      },
      "wirtualsdk.WorkspaceAgentStatus": {
        "type": "string",
        "enum": [
          "connecting",
          "connected",
          "disconnected",
          "timeout"
        ],
        "x-enum-varnames": [
          "WorkspaceAgentConnecting",
          "WorkspaceAgentConnected",
          "WorkspaceAgentDisconnected",
          "WorkspaceAgentTimeout"
        ]
      },
      "wirtualsdk.WorkspaceApp": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string"
          },
          "display_name": {
            "type": "string",
            "description": "DisplayName is a friendly name for the app."
          },
          "external": {
            "type": "boolean",
            "description": "External specifies whether the URL should be opened externally on\nthe client or not."
          },
          "health": {
            "$ref": "#/components/schemas/wirtualsdk.WorkspaceAppHealth"
          },
          "healthcheck": {
            "type": "object",
            "description": "Healthcheck specifies the configuration for checking app health.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.Healthcheck"
              }
            ]
          },
          "hidden": {
            "type": "boolean"
          },
          "icon": {
            "type": "string",
            "description": "Icon is a relative path or external URL that specifies\nan icon to be displayed in the dashboard."
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "sharing_level": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceAppSharingLevel"
              }
            ]
          },
          "slug": {
            "type": "string",
            "description": "Slug is a unique identifier within the agent."
          },
          "subdomain": {
            "type": "boolean",
            "description": "Subdomain denotes whether the app should be accessed via a path on the\n`wirtual server` or via a hostname-based dev URL. If this is set to true\nand there is no app wildcard configured on the server, the app will not\nbe accessible in the UI."
          },
          "subdomain_name": {
            "type": "string",
            "description": "SubdomainName is the application domain exposed on the `wirtual server`."
          },
          "url": {
            "type": "string",
            "description": "URL is the address being proxied to inside the workspace.\nIf external is specified, this will be opened on the client."
          }
        }
      },
      "wirtualsdk.WorkspaceAppHealth": {
        "type": "string",
        "enum": [
          "disabled",
          "initializing",
          "healthy",
          "unhealthy"
        ],
        "x-enum-varnames": [
          "WorkspaceAppHealthDisabled",
          "WorkspaceAppHealthInitializing",
          "WorkspaceAppHealthHealthy",
          "WorkspaceAppHealthUnhealthy"
        ]
      },
      "wirtualsdk.WorkspaceAppSharingLevel": {
        "type": "string",
        "enum": [
          "owner",
          "authenticated",
          "public"
        ],
        "x-enum-varnames": [
          "WorkspaceAppSharingLevelOwner",
          "WorkspaceAppSharingLevelAuthenticated",
          "WorkspaceAppSharingLevelPublic"
        ]
      },
      "wirtualsdk.WorkspaceBuild": {
        "type": "object",
        "properties": {
          "build_number": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "daily_cost": {
            "type": "integer"
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "initiator_id": {
            "type": "string",
            "format": "uuid"
          },
          "initiator_name": {
            "type": "string"
          },
          "job": {
            "$ref": "#/components/schemas/wirtualsdk.ProvisionerJob"
          },
          "matched_provisioners": {
            "$ref": "#/components/schemas/wirtualsdk.MatchedProvisioners"
          },
          "max_deadline": {
            "type": "string",
            "format": "date-time"
          },
          "reason": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.BuildReason"
              }
            ]
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceResource"
            }
          },
          "status": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceStatus"
              }
            ]
          },
          "template_version_id": {
            "type": "string",
            "format": "uuid"
          },
          "template_version_name": {
            "type": "string"
          },
          "transition": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceTransition"
              }
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid"
          },
          "workspace_name": {
            "type": "string"
          },
          "workspace_owner_avatar_url": {
            "type": "string"
          },
          "workspace_owner_id": {
            "type": "string",
            "format": "uuid"
          },
          "workspace_owner_name": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.WorkspaceBuildParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.WorkspaceBuildTimings": {
        "type": "object",
        "properties": {
          "agent_connection_timings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.AgentConnectionTiming"
            }
          },
          "agent_script_timings": {
            "type": "array",
            "description": "TODO: Consolidate agent-related timing metrics into a single struct when\nupdating the API version",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.AgentScriptTiming"
            }
          },
          "provisioner_timings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.ProvisionerTiming"
            }
          }
        }
      },
      "wirtualsdk.WorkspaceConnectionLatencyMS": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number"
          },
          "p95": {
            "type": "number"
          }
        }
      },
      "wirtualsdk.WorkspaceDeploymentStats": {
        "type": "object",
        "properties": {
          "building": {
            "type": "integer"
          },
          "connection_latency_ms": {
            "$ref": "#/components/schemas/wirtualsdk.WorkspaceConnectionLatencyMS"
          },
          "failed": {
            "type": "integer"
          },
          "pending": {
            "type": "integer"
          },
          "running": {
            "type": "integer"
          },
          "rx_bytes": {
            "type": "integer"
          },
          "stopped": {
            "type": "integer"
          },
          "tx_bytes": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.WorkspaceHealth": {
        "type": "object",
        "properties": {
          "failing_agents": {
            "type": "array",
            "description": "FailingAgents lists the IDs of the agents that are failing, if any.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "healthy": {
            "type": "boolean",
            "description": "Healthy is true if the workspace is healthy.",
            "example": false
          }
        }
      },
      "wirtualsdk.WorkspaceProxy": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "derp_enabled": {
            "type": "boolean"
          },
          "derp_only": {
            "type": "boolean"
          },
          "display_name": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean"
          },
          "icon_url": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "path_app_url": {
            "type": "string",
            "description": "PathAppURL is the URL to the base path for path apps. Optional\nunless wildcard_hostname is set.\nE.g. https://us.example.com"
          },
          "status": {
            "type": "object",
            "description": "Status is the latest status check of the proxy. This will be empty for deleted\nproxies. This value can be used to determine if a workspace proxy is healthy\nand ready to use.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceProxyStatus"
              }
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string"
          },
          "wildcard_hostname": {
            "type": "string",
            "description": "WildcardHostname is the wildcard hostname for subdomain apps.\nE.g. *.us.example.com\nE.g. *--suffix.au.example.com\nOptional. Does not need to be on the same domain as PathAppURL."
          }
        }
      },
      "wirtualsdk.WorkspaceProxyStatus": {
        "type": "object",
        "properties": {
          "checked_at": {
            "type": "string",
            "format": "date-time"
          },
          "report": {
            "type": "object",
            "description": "Report provides more information about the health of the workspace proxy.",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.ProxyHealthReport"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/wirtualsdk.ProxyHealthStatus"
          }
        }
      },
      "wirtualsdk.WorkspaceQuota": {
        "type": "object",
        "properties": {
          "budget": {
            "type": "integer"
          },
          "credits_consumed": {
            "type": "integer"
          }
        }
      },
      "wirtualsdk.WorkspaceResource": {
        "type": "object",
        "properties": {
          "agents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceAgent"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "daily_cost": {
            "type": "integer"
          },
          "hide": {
            "type": "boolean"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "job_id": {
            "type": "string",
            "format": "uuid"
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.WorkspaceResourceMetadata"
            }
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "workspace_transition": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/wirtualsdk.WorkspaceTransition"
              }
            ]
          }
        }
      },
      "wirtualsdk.WorkspaceResourceMetadata": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "sensitive": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "wirtualsdk.WorkspaceStatus": {
        "type": "string",
        "enum": [
          "pending",
          "starting",
          "running",
          "stopping",
          "stopped",
          "failed",
          "canceling",
          "canceled",
          "deleting",
          "deleted"
        ],
        "x-enum-varnames": [
          "WorkspaceStatusPending",
          "WorkspaceStatusStarting",
          "WorkspaceStatusRunning",
          "WorkspaceStatusStopping",
          "WorkspaceStatusStopped",
          "WorkspaceStatusFailed",
          "WorkspaceStatusCanceling",
          "WorkspaceStatusCanceled",
          "WorkspaceStatusDeleting",
          "WorkspaceStatusDeleted"
        ]
      },
      "wirtualsdk.WorkspaceTransition": {
        "type": "string",
        "enum": [
          "start",
          "stop",
          "delete"
        ],
        "x-enum-varnames": [
          "WorkspaceTransitionStart",
          "WorkspaceTransitionStop",
          "WorkspaceTransitionDelete"
        ]
      },
      "wirtualsdk.WorkspacesResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "workspaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Workspace"
            }
          }
        }
      },
      "derp.BytesSentRecv": {
        "type": "object",
        "properties": {
          "key": {
            "type": "object",
            "description": "Key is the public key of the client which sent/received these bytes.",
            "allOf": [
              {
                "$ref": "#/components/schemas/key.NodePublic"
              }
            ]
          },
          "recv": {
            "type": "integer"
          },
          "sent": {
            "type": "integer"
          }
        }
      },
      "derp.ServerInfoMessage": {
        "type": "object",
        "properties": {
          "tokenBucketBytesBurst": {
            "type": "integer",
            "description": "TokenBucketBytesBurst is how many bytes the server will\nallow to burst, temporarily violating\nTokenBucketBytesPerSecond.\n\nZero means unspecified. There might be a limit, but the\nclient need not try to respect it."
          },
          "tokenBucketBytesPerSecond": {
            "type": "integer",
            "description": "TokenBucketBytesPerSecond is how many bytes per second the\nserver says it will accept, including all framing bytes.\n\nZero means unspecified. There might be a limit, but the\nclient need not try to respect it."
          }
        }
      },
      "health.Code": {
        "type": "string",
        "enum": [
          "EUNKNOWN",
          "EWP01",
          "EWP02",
          "EWP04",
          "EDB01",
          "EDB02",
          "EWS01",
          "EWS02",
          "EWS03",
          "EACS01",
          "EACS02",
          "EACS03",
          "EACS04",
          "EDERP01",
          "EDERP02",
          "EPD01",
          "EPD02",
          "EPD03"
        ],
        "x-enum-varnames": [
          "CodeUnknown",
          "CodeProxyUpdate",
          "CodeProxyFetch",
          "CodeProxyUnhealthy",
          "CodeDatabasePingFailed",
          "CodeDatabasePingSlow",
          "CodeWebsocketDial",
          "CodeWebsocketEcho",
          "CodeWebsocketMsg",
          "CodeAccessURLNotSet",
          "CodeAccessURLInvalid",
          "CodeAccessURLFetch",
          "CodeAccessURLNotOK",
          "CodeDERPNodeUsesWebsocket",
          "CodeDERPOneNodeUnhealthy",
          "CodeProvisionerDaemonsNoProvisionerDaemons",
          "CodeProvisionerDaemonVersionMismatch",
          "CodeProvisionerDaemonAPIMajorVersionDeprecated"
        ]
      },
      "health.Message": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/health.Code"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "health.Severity": {
        "type": "string",
        "enum": [
          "ok",
          "warning",
          "error"
        ],
        "x-enum-varnames": [
          "SeverityOK",
          "SeverityWarning",
          "SeverityError"
        ]
      },
      "healthsdk.AccessURLReport": {
        "type": "object",
        "properties": {
          "access_url": {
            "type": "string"
          },
          "dismissed": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean",
            "description": "Healthy is deprecated and left for backward compatibility purposes, use `Severity` instead."
          },
          "healthz_response": {
            "type": "string"
          },
          "reachable": {
            "type": "boolean"
          },
          "severity": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/health.Severity"
              }
            ]
          },
          "status_code": {
            "type": "integer"
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health.Message"
            }
          }
        }
      },
      "healthsdk.DERPHealthReport": {
        "type": "object",
        "properties": {
          "dismissed": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean",
            "description": "Healthy is deprecated and left for backward compatibility purposes, use `Severity` instead."
          },
          "netcheck": {
            "$ref": "#/components/schemas/netcheck.Report"
          },
          "netcheck_err": {
            "type": "string"
          },
          "netcheck_logs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "regions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/healthsdk.DERPRegionReport"
            }
          },
          "severity": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/health.Severity"
              }
            ]
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health.Message"
            }
          }
        }
      },
      "healthsdk.DERPNodeReport": {
        "type": "object",
        "properties": {
          "can_exchange_messages": {
            "type": "boolean"
          },
          "client_errs": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "client_logs": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "error": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean",
            "description": "Healthy is deprecated and left for backward compatibility purposes, use `Severity` instead."
          },
          "node": {
            "$ref": "#/components/schemas/tailcfg.DERPNode"
          },
          "node_info": {
            "$ref": "#/components/schemas/derp.ServerInfoMessage"
          },
          "round_trip_ping": {
            "type": "string"
          },
          "round_trip_ping_ms": {
            "type": "integer"
          },
          "severity": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/health.Severity"
              }
            ]
          },
          "stun": {
            "$ref": "#/components/schemas/healthsdk.STUNReport"
          },
          "uses_websocket": {
            "type": "boolean"
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health.Message"
            }
          }
        }
      },
      "healthsdk.DERPRegionReport": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean",
            "description": "Healthy is deprecated and left for backward compatibility purposes, use `Severity` instead."
          },
          "node_reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/healthsdk.DERPNodeReport"
            }
          },
          "region": {
            "$ref": "#/components/schemas/tailcfg.DERPRegion"
          },
          "severity": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/health.Severity"
              }
            ]
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health.Message"
            }
          }
        }
      },
      "healthsdk.DatabaseReport": {
        "type": "object",
        "properties": {
          "dismissed": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean",
            "description": "Healthy is deprecated and left for backward compatibility purposes, use `Severity` instead."
          },
          "latency": {
            "type": "string"
          },
          "latency_ms": {
            "type": "integer"
          },
          "reachable": {
            "type": "boolean"
          },
          "severity": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/health.Severity"
              }
            ]
          },
          "threshold_ms": {
            "type": "integer"
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health.Message"
            }
          }
        }
      },
      "healthsdk.HealthSection": {
        "type": "string",
        "enum": [
          "DERP",
          "AccessURL",
          "Websocket",
          "Database",
          "WorkspaceProxy",
          "ProvisionerDaemons"
        ],
        "x-enum-varnames": [
          "HealthSectionDERP",
          "HealthSectionAccessURL",
          "HealthSectionWebsocket",
          "HealthSectionDatabase",
          "HealthSectionWorkspaceProxy",
          "HealthSectionProvisionerDaemons"
        ]
      },
      "healthsdk.HealthSettings": {
        "type": "object",
        "properties": {
          "dismissed_healthchecks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/healthsdk.HealthSection"
            }
          }
        }
      },
      "healthsdk.HealthcheckReport": {
        "type": "object",
        "properties": {
          "access_url": {
            "$ref": "#/components/schemas/healthsdk.AccessURLReport"
          },
          "wirtual_version": {
            "type": "string",
            "description": "The Wirtual version of the server that the report was generated on."
          },
          "database": {
            "$ref": "#/components/schemas/healthsdk.DatabaseReport"
          },
          "derp": {
            "$ref": "#/components/schemas/healthsdk.DERPHealthReport"
          },
          "healthy": {
            "type": "boolean",
            "description": "Healthy is true if the report returns no errors.\nDeprecated: use `Severity` instead"
          },
          "provisioner_daemons": {
            "$ref": "#/components/schemas/healthsdk.ProvisionerDaemonsReport"
          },
          "severity": {
            "type": "object",
            "description": "Severity indicates the status of Wirtual health.",
            "allOf": [
              {
                "$ref": "#/components/schemas/health.Severity"
              }
            ]
          },
          "time": {
            "type": "string",
            "description": "Time is the time the report was generated at.",
            "format": "date-time"
          },
          "websocket": {
            "$ref": "#/components/schemas/healthsdk.WebsocketReport"
          },
          "workspace_proxy": {
            "$ref": "#/components/schemas/healthsdk.WorkspaceProxyReport"
          }
        }
      },
      "healthsdk.ProvisionerDaemonsReport": {
        "type": "object",
        "properties": {
          "dismissed": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/healthsdk.ProvisionerDaemonsReportItem"
            }
          },
          "severity": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/health.Severity"
              }
            ]
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health.Message"
            }
          }
        }
      },
      "healthsdk.ProvisionerDaemonsReportItem": {
        "type": "object",
        "properties": {
          "provisioner_daemon": {
            "$ref": "#/components/schemas/wirtualsdk.ProvisionerDaemon"
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health.Message"
            }
          }
        }
      },
      "healthsdk.STUNReport": {
        "type": "object",
        "properties": {
          "canSTUN": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "healthsdk.UpdateHealthSettings": {
        "type": "object",
        "properties": {
          "dismissed_healthchecks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/healthsdk.HealthSection"
            }
          }
        }
      },
      "healthsdk.WebsocketReport": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "code": {
            "type": "integer"
          },
          "dismissed": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean",
            "description": "Healthy is deprecated and left for backward compatibility purposes, use `Severity` instead."
          },
          "severity": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/health.Severity"
              }
            ]
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health.Message"
            }
          }
        }
      },
      "healthsdk.WorkspaceProxyReport": {
        "type": "object",
        "properties": {
          "dismissed": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "healthy": {
            "type": "boolean",
            "description": "Healthy is deprecated and left for backward compatibility purposes, use `Severity` instead."
          },
          "severity": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/health.Severity"
              }
            ]
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health.Message"
            }
          },
          "workspace_proxies": {
            "$ref": "#/components/schemas/wirtualsdk.RegionsResponse-wirtualsdk_WorkspaceProxy"
          }
        }
      },
      "key.NodePublic": {
        "type": "object"
      },
      "netcheck.Report": {
        "type": "object",
        "properties": {
          "captivePortal": {
            "type": "string",
            "description": "CaptivePortal is set when we think there's a captive portal that is\nintercepting HTTP traffic."
          },
          "globalV4": {
            "type": "string",
            "description": "ip:port of global IPv4"
          },
          "globalV6": {
            "type": "string",
            "description": "[ip]:port of global IPv6"
          },
          "hairPinning": {
            "type": "string",
            "description": "HairPinning is whether the router supports communicating\nbetween two local devices through the NATted public IP address\n(on IPv4)."
          },
          "icmpv4": {
            "type": "boolean",
            "description": "an ICMPv4 round trip completed"
          },
          "ipv4": {
            "type": "boolean",
            "description": "an IPv4 STUN round trip completed"
          },
          "ipv4CanSend": {
            "type": "boolean",
            "description": "an IPv4 packet was able to be sent"
          },
          "ipv6": {
            "type": "boolean",
            "description": "an IPv6 STUN round trip completed"
          },
          "ipv6CanSend": {
            "type": "boolean",
            "description": "an IPv6 packet was able to be sent"
          },
          "mappingVariesByDestIP": {
            "type": "string",
            "description": "MappingVariesByDestIP is whether STUN results depend which\nSTUN server you're talking to (on IPv4)."
          },
          "oshasIPv6": {
            "type": "boolean",
            "description": "could bind a socket to ::1"
          },
          "pcp": {
            "type": "string",
            "description": "PCP is whether PCP appears present on the LAN.\nEmpty means not checked."
          },
          "pmp": {
            "type": "string",
            "description": "PMP is whether NAT-PMP appears present on the LAN.\nEmpty means not checked."
          },
          "preferredDERP": {
            "type": "integer",
            "description": "or 0 for unknown"
          },
          "regionLatency": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            },
            "description": "keyed by DERP Region ID"
          },
          "regionV4Latency": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            },
            "description": "keyed by DERP Region ID"
          },
          "regionV6Latency": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            },
            "description": "keyed by DERP Region ID"
          },
          "udp": {
            "type": "boolean",
            "description": "a UDP STUN round trip completed"
          },
          "upnP": {
            "type": "string",
            "description": "UPnP is whether UPnP appears present on the LAN.\nEmpty means not checked."
          }
        }
      },
      "oauth2.Token": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "AccessToken is the token that authorizes and authenticates\nthe requests."
          },
          "expires_in": {
            "type": "integer",
            "description": "ExpiresIn is the OAuth2 wire format \"expires_in\" field,\nwhich specifies how many seconds later the token expires,\nrelative to an unknown time base approximately around \"now\".\nIt is the application's responsibility to populate\n`Expiry` from `ExpiresIn` when required."
          },
          "expiry": {
            "type": "string",
            "description": "Expiry is the optional expiration time of the access token.\n\nIf zero, TokenSource implementations will reuse the same\ntoken forever and RefreshToken or equivalent\nmechanisms for that TokenSource will not be used."
          },
          "refresh_token": {
            "type": "string",
            "description": "RefreshToken is a token that's used by the application\n(as opposed to the user) to refresh the access token\nif it expires."
          },
          "token_type": {
            "type": "string",
            "description": "TokenType is the type of token.\nThe Type method returns either this or \"Bearer\", the default."
          }
        }
      },
      "regexp.Regexp": {
        "type": "object"
      },
      "serpent.Annotations": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "serpent.Group": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/serpent.Group"
          },
          "yaml": {
            "type": "string"
          }
        }
      },
      "serpent.HostPort": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "port": {
            "type": "string"
          }
        }
      },
      "serpent.Option": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "description": "Annotations enable extensions to serpent higher up in the stack. It's useful for\nhelp formatting and documentation generation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/serpent.Annotations"
              }
            ]
          },
          "default": {
            "type": "string",
            "description": "Default is parsed into Value if set."
          },
          "description": {
            "type": "string"
          },
          "env": {
            "type": "string",
            "description": "Env is the environment variable used to configure this option. If unset,\nenvironment configuring is disabled."
          },
          "flag": {
            "type": "string",
            "description": "Flag is the long name of the flag used to configure this option. If unset,\nflag configuring is disabled."
          },
          "flag_shorthand": {
            "type": "string",
            "description": "FlagShorthand is the one-character shorthand for the flag. If unset, no\nshorthand is used."
          },
          "group": {
            "type": "object",
            "description": "Group is a group hierarchy that helps organize this option in help, configs\nand other documentation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/serpent.Group"
              }
            ]
          },
          "hidden": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean",
            "description": "Required means this value must be set by some means. It requires\n`ValueSource != ValueSourceNone`\nIf `Default` is set, then `Required` is ignored."
          },
          "use_instead": {
            "type": "array",
            "description": "UseInstead is a list of options that should be used instead of this one.\nThe field is used to generate a deprecation warning.",
            "items": {
              "$ref": "#/components/schemas/serpent.Option"
            }
          },
          "value": {
            "type": "object",
            "description": "Value includes the types listed in values.go."
          },
          "value_source": {
            "$ref": "#/components/schemas/serpent.ValueSource"
          },
          "yaml": {
            "type": "string",
            "description": "YAML is the YAML key used to configure this option. If unset, YAML\nconfiguring is disabled."
          }
        }
      },
      "serpent.Regexp": {
        "type": "object"
      },
      "serpent.Struct-array_wirtualsdk_ExternalAuthConfig": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.ExternalAuthConfig"
            }
          }
        }
      },
      "serpent.Struct-array_wirtualsdk_LinkConfig": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.LinkConfig"
            }
          }
        }
      },
      "serpent.URL": {
        "type": "object",
        "properties": {
          "forceQuery": {
            "type": "boolean",
            "description": "append a query ('?') even if RawQuery is empty"
          },
          "fragment": {
            "type": "string",
            "description": "fragment for references, without '#'"
          },
          "host": {
            "type": "string",
            "description": "host or host:port (see Hostname and Port methods)"
          },
          "omitHost": {
            "type": "boolean",
            "description": "do not emit empty host (authority)"
          },
          "opaque": {
            "type": "string",
            "description": "encoded opaque data"
          },
          "path": {
            "type": "string",
            "description": "path (relative paths may omit leading slash)"
          },
          "rawFragment": {
            "type": "string",
            "description": "encoded fragment hint (see EscapedFragment method)"
          },
          "rawPath": {
            "type": "string",
            "description": "encoded path hint (see EscapedPath method)"
          },
          "rawQuery": {
            "type": "string",
            "description": "encoded query values, without '?'"
          },
          "scheme": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "description": "username and password information",
            "allOf": [
              {
                "$ref": "#/components/schemas/url.Userinfo"
              }
            ]
          }
        }
      },
      "serpent.ValueSource": {
        "type": "string",
        "enum": [
          "",
          "flag",
          "env",
          "yaml",
          "default"
        ],
        "x-enum-varnames": [
          "ValueSourceNone",
          "ValueSourceFlag",
          "ValueSourceEnv",
          "ValueSourceYAML",
          "ValueSourceDefault"
        ]
      },
      "tailcfg.DERPHomeParams": {
        "type": "object",
        "properties": {
          "regionScore": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            },
            "description": "RegionScore scales latencies of DERP regions by a given scaling\nfactor when determining which region to use as the home\n(\"preferred\") DERP. Scores in the range (0, 1) will cause this\nregion to be proportionally more preferred, and scores in the range\n(1, ∞) will penalize a region.\n\nIf a region is not present in this map, it is treated as having a\nscore of 1.0.\n\nScores should not be 0 or negative; such scores will be ignored.\n\nA nil map means no change from the previous value (if any); an empty\nnon-nil map can be sent to reset all scores back to 1.0."
          }
        }
      },
      "tailcfg.DERPMap": {
        "type": "object",
        "properties": {
          "homeParams": {
            "type": "object",
            "description": "HomeParams, if non-nil, is a change in home parameters.\n\nThe rest of the DEPRMap fields, if zero, means unchanged.",
            "allOf": [
              {
                "$ref": "#/components/schemas/tailcfg.DERPHomeParams"
              }
            ]
          },
          "omitDefaultRegions": {
            "type": "boolean",
            "description": "OmitDefaultRegions specifies to not use Tailscale's DERP servers, and only use those\nspecified in this DERPMap. If there are none set outside of the defaults, this is a noop.\n\nThis field is only meaningful if the Regions map is non-nil (indicating a change)."
          },
          "regions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/tailcfg.DERPRegion"
            },
            "description": "Regions is the set of geographic regions running DERP node(s).\n\nIt's keyed by the DERPRegion.RegionID.\n\nThe numbers are not necessarily contiguous."
          }
        }
      },
      "tailcfg.DERPNode": {
        "type": "object",
        "properties": {
          "canPort80": {
            "type": "boolean",
            "description": "CanPort80 specifies whether this DERP node is accessible over HTTP\non port 80 specifically. This is used for captive portal checks."
          },
          "certName": {
            "type": "string",
            "description": "CertName optionally specifies the expected TLS cert common\nname. If empty, HostName is used. If CertName is non-empty,\nHostName is only used for the TCP dial (if IPv4/IPv6 are\nnot present) + TLS ClientHello."
          },
          "derpport": {
            "type": "integer",
            "description": "DERPPort optionally provides an alternate TLS port number\nfor the DERP HTTPS server.\n\nIf zero, 443 is used."
          },
          "forceHTTP": {
            "type": "boolean",
            "description": "ForceHTTP is used by unit tests to force HTTP.\nIt should not be set by users."
          },
          "hostName": {
            "type": "string",
            "description": "HostName is the DERP node's hostname.\n\nIt is required but need not be unique; multiple nodes may\nhave the same HostName but vary in configuration otherwise."
          },
          "insecureForTests": {
            "type": "boolean",
            "description": "InsecureForTests is used by unit tests to disable TLS verification.\nIt should not be set by users."
          },
          "ipv4": {
            "type": "string",
            "description": "IPv4 optionally forces an IPv4 address to use, instead of using DNS.\nIf empty, A record(s) from DNS lookups of HostName are used.\nIf the string is not an IPv4 address, IPv4 is not used; the\nconventional string to disable IPv4 (and not use DNS) is\n\"none\"."
          },
          "ipv6": {
            "type": "string",
            "description": "IPv6 optionally forces an IPv6 address to use, instead of using DNS.\nIf empty, AAAA record(s) from DNS lookups of HostName are used.\nIf the string is not an IPv6 address, IPv6 is not used; the\nconventional string to disable IPv6 (and not use DNS) is\n\"none\"."
          },
          "name": {
            "type": "string",
            "description": "Name is a unique node name (across all regions).\nIt is not a host name.\nIt's typically of the form \"1b\", \"2a\", \"3b\", etc. (region\nID + suffix within that region)"
          },
          "regionID": {
            "type": "integer",
            "description": "RegionID is the RegionID of the DERPRegion that this node\nis running in."
          },
          "stunonly": {
            "type": "boolean",
            "description": "STUNOnly marks a node as only a STUN server and not a DERP\nserver."
          },
          "stunport": {
            "type": "integer",
            "description": "Port optionally specifies a STUN port to use.\nZero means 3478.\nTo disable STUN on this node, use -1."
          },
          "stuntestIP": {
            "type": "string",
            "description": "STUNTestIP is used in tests to override the STUN server's IP.\nIf empty, it's assumed to be the same as the DERP server."
          }
        }
      },
      "tailcfg.DERPRegion": {
        "type": "object",
        "properties": {
          "avoid": {
            "type": "boolean",
            "description": "Avoid is whether the client should avoid picking this as its home\nregion. The region should only be used if a peer is there.\nClients already using this region as their home should migrate\naway to a new region without Avoid set."
          },
          "embeddedRelay": {
            "type": "boolean",
            "description": "EmbeddedRelay is true when the region is bundled with the Wirtual\ncontrol plane."
          },
          "nodes": {
            "type": "array",
            "description": "Nodes are the DERP nodes running in this region, in\npriority order for the current client. Client TLS\nconnections should ideally only go to the first entry\n(falling back to the second if necessary). STUN packets\nshould go to the first 1 or 2.\n\nIf nodes within a region route packets amongst themselves,\nbut not to other regions. That said, each user/domain\nshould get a the same preferred node order, so if all nodes\nfor a user/network pick the first one (as they should, when\nthings are healthy), the inter-cluster routing is minimal\nto zero.",
            "items": {
              "$ref": "#/components/schemas/tailcfg.DERPNode"
            }
          },
          "regionCode": {
            "type": "string",
            "description": "RegionCode is a short name for the region. It's usually a popular\ncity or airport code in the region: \"nyc\", \"sf\", \"sin\",\n\"fra\", etc."
          },
          "regionID": {
            "type": "integer",
            "description": "RegionID is a unique integer for a geographic region.\n\nIt corresponds to the legacy derpN.tailscale.com hostnames\nused by older clients. (Older clients will continue to resolve\nderpN.tailscale.com when contacting peers, rather than use\nthe server-provided DERPMap)\n\nRegionIDs must be non-zero, positive, and guaranteed to fit\nin a JavaScript number.\n\nRegionIDs in range 900-999 are reserved for end users to run their\nown DERP nodes."
          },
          "regionName": {
            "type": "string",
            "description": "RegionName is a long English name for the region: \"New York City\",\n\"San Francisco\", \"Singapore\", \"Frankfurt\", etc."
          }
        }
      },
      "url.Userinfo": {
        "type": "object"
      },
      "workspaceapps.AccessMethod": {
        "type": "string",
        "enum": [
          "path",
          "subdomain",
          "terminal"
        ],
        "x-enum-varnames": [
          "AccessMethodPath",
          "AccessMethodSubdomain",
          "AccessMethodTerminal"
        ]
      },
      "workspaceapps.IssueTokenRequest": {
        "type": "object",
        "properties": {
          "app_hostname": {
            "type": "string",
            "description": "AppHostname is the optional hostname for subdomain apps on the external\nproxy. It must start with an asterisk."
          },
          "app_path": {
            "type": "string",
            "description": "AppPath is the path of the user underneath the app base path."
          },
          "app_query": {
            "type": "string",
            "description": "AppQuery is the query parameters the user provided in the app request."
          },
          "app_request": {
            "$ref": "#/components/schemas/workspaceapps.Request"
          },
          "path_app_base_url": {
            "type": "string",
            "description": "PathAppBaseURL is required."
          },
          "session_token": {
            "type": "string",
            "description": "SessionToken is the session token provided by the user."
          }
        }
      },
      "workspaceapps.Request": {
        "type": "object",
        "properties": {
          "access_method": {
            "$ref": "#/components/schemas/workspaceapps.AccessMethod"
          },
          "agent_name_or_id": {
            "type": "string",
            "description": "AgentNameOrID is not required if the workspace has only one agent."
          },
          "app_prefix": {
            "type": "string",
            "description": "Prefix is the prefix of the subdomain app URL. Prefix should have a\ntrailing \"---\" if set."
          },
          "app_slug_or_port": {
            "type": "string"
          },
          "base_path": {
            "type": "string",
            "description": "BasePath of the app. For path apps, this is the path prefix in the router\nfor this particular app. For subdomain apps, this should be \"/\". This is\nused for setting the cookie path."
          },
          "username_or_id": {
            "type": "string",
            "description": "For the following fields, if the AccessMethod is AccessMethodTerminal,\nthen only AgentNameOrID may be set and it must be a UUID. The other\nfields must be left blank."
          },
          "workspace_name_or_id": {
            "type": "string"
          }
        }
      },
      "workspaceapps.StatsReport": {
        "type": "object",
        "properties": {
          "access_method": {
            "$ref": "#/components/schemas/workspaceapps.AccessMethod"
          },
          "agent_id": {
            "type": "string"
          },
          "requests": {
            "type": "integer"
          },
          "session_ended_at": {
            "type": "string",
            "description": "Updated periodically while app is in use active and when the last connection is closed."
          },
          "session_id": {
            "type": "string"
          },
          "session_started_at": {
            "type": "string"
          },
          "slug_or_port": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "workspace_id": {
            "type": "string"
          }
        }
      },
      "workspacesdk.AgentConnectionInfo": {
        "type": "object",
        "properties": {
          "derp_force_websockets": {
            "type": "boolean"
          },
          "derp_map": {
            "$ref": "#/components/schemas/tailcfg.DERPMap"
          },
          "disable_direct_connections": {
            "type": "boolean"
          }
        }
      },
      "wsproxysdk.CryptoKeysResponse": {
        "type": "object",
        "properties": {
          "crypto_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.CryptoKey"
            }
          }
        }
      },
      "wsproxysdk.DeregisterWorkspaceProxyRequest": {
        "type": "object",
        "properties": {
          "replica_id": {
            "type": "string",
            "description": "ReplicaID is a unique identifier for the replica of the proxy that is\nderegistering. It should be generated by the client on startup and\nshould've already been passed to the register endpoint."
          }
        }
      },
      "wsproxysdk.IssueSignedAppTokenResponse": {
        "type": "object",
        "properties": {
          "signed_token_str": {
            "type": "string",
            "description": "SignedTokenStr should be set as a cookie on the response."
          }
        }
      },
      "wsproxysdk.RegisterWorkspaceProxyRequest": {
        "type": "object",
        "properties": {
          "access_url": {
            "type": "string",
            "description": "AccessURL that hits the workspace proxy api."
          },
          "derp_enabled": {
            "type": "boolean",
            "description": "DerpEnabled indicates whether the proxy should be included in the DERP\nmap or not."
          },
          "derp_only": {
            "type": "boolean",
            "description": "DerpOnly indicates whether the proxy should only be included in the DERP\nmap and should not be used for serving apps."
          },
          "hostname": {
            "type": "string",
            "description": "ReplicaHostname is the OS hostname of the machine that the proxy is running\non.  This is only used for tracking purposes in the replicas table."
          },
          "replica_error": {
            "type": "string",
            "description": "ReplicaError is the error that the replica encountered when trying to\ndial it's peers. This is stored in the replicas table for debugging\npurposes but does not affect the proxy's ability to register.\n\nThis value is only stored on subsequent requests to the register\nendpoint, not the first request."
          },
          "replica_id": {
            "type": "string",
            "description": "ReplicaID is a unique identifier for the replica of the proxy that is\nregistering. It should be generated by the client on startup and\npersisted (in memory only) until the process is restarted."
          },
          "replica_relay_address": {
            "type": "string",
            "description": "ReplicaRelayAddress is the DERP address of the replica that other\nreplicas may use to connect internally for DERP meshing."
          },
          "version": {
            "type": "string",
            "description": "Version is the Wirtual version of the proxy."
          },
          "wildcard_hostname": {
            "type": "string",
            "description": "WildcardHostname that the workspace proxy api is serving for subdomain apps."
          }
        }
      },
      "wsproxysdk.RegisterWorkspaceProxyResponse": {
        "type": "object",
        "properties": {
          "derp_force_websockets": {
            "type": "boolean"
          },
          "derp_map": {
            "$ref": "#/components/schemas/tailcfg.DERPMap"
          },
          "derp_mesh_key": {
            "type": "string"
          },
          "derp_region_id": {
            "type": "integer"
          },
          "sibling_replicas": {
            "type": "array",
            "description": "SiblingReplicas is a list of all other replicas of the proxy that have\nnot timed out.",
            "items": {
              "$ref": "#/components/schemas/wirtualsdk.Replica"
            }
          }
        }
      },
      "wsproxysdk.ReportAppStatsRequest": {
        "type": "object",
        "properties": {
          "stats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/workspaceapps.StatsReport"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "apiKey",
        "name": "Authorizaiton",
        "in": "header"
      },
      "WirtualSessionToken": {
        "type": "apiKey",
        "name": "Wirtual-Session-Token",
        "in": "header"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}
